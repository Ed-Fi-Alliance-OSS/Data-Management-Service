# Multi-Instance Testing Environment Configuration
# This configuration enables route qualifiers for testing multi-instance routing

# ============================================================================
# Route Qualifier Configuration
# ============================================================================
# These segments will be extracted from URLs in the format:
# /{districtId}/{schoolYear}/data/ed-fi/schools
#
# The order matters and should match the URL pattern
# Using JSON array format - supports zero or many segments
ROUTE_QUALIFIER_SEGMENTS=["districtId","schoolYear"]

# ============================================================================
# Standard DMS Configuration
# ============================================================================

# PostgreSQL Database
POSTGRES_DB=edfi_datamanagementservice
POSTGRES_DB_NAME=edfi_datamanagementservice
POSTGRES_USER=postgres
POSTGRES_PASSWORD=abcdefgh1!
POSTGRES_PORT=5435

# DMS Configuration
DMS_PORT=8080
DMS_HTTP_PORTS=8080
DMS_LOG_LEVEL=Information
LOG_LEVEL=DEBUG
MASK_REQUEST_BODY_IN_LOGS=true
CORRELATION_ID_HEADER=
BYPASS_STRING_COERCION=false
MAXIMUM_PAGE_SIZE=500
PATH_BASE=api
USE_REVERSE_PROXY_HEADERS=false
USE_API_SCHEMA_PATH=false
API_SCHEMA_PATH=/app/ApiSchema
DMS_ENABLE_MANAGEMENT_ENDPOINTS=true

# API Schema Packages
SCHEMA_PACKAGES='[
  {
    "version": "1.0.294",
    "feedUrl": "https://pkgs.dev.azure.com/ed-fi-alliance/Ed-Fi-Alliance-OSS/_packaging/EdFi/nuget/v3/index.json",
    "name": "EdFi.DataStandard52.ApiSchema"
  },
  {
    "version": "1.0.294",
    "feedUrl": "https://pkgs.dev.azure.com/ed-fi-alliance/Ed-Fi-Alliance-OSS/_packaging/EdFi/nuget/v3/index.json",
    "name": "EdFi.TPDM.ApiSchema"
  }
]'

# Configuration Service
CMS_PORT=8081
CMS_LOG_LEVEL=Information
CMS_DATABASE=edfi_cms
DMS_CONFIG_ASPNETCORE_HTTP_PORTS=8081
DMS_CONFIG_DATASTORE=postgresql
DMS_CONFIG_LOG_LEVEL=Information
DMS_CONFIG_PATH_BASE=config
DMS_CONFIG_USE_REVERSE_PROXY_HEADERS=false

# Identity Provider Settings (Self-Contained)
SELF_CONTAINED_OAUTH_TOKEN_ENDPOINT=http://localhost:8081/connect/token
SELF_CONTAINED_DMS_JWT_AUTHORITY=http://dms-config-service:8081
SELF_CONTAINED_DMS_JWT_METADATA_ADDRESS=http://dms-config-service:8081/.well-known/openid-configuration

# JWT Settings
DMS_JWT_AUTHORITY=http://dms-config-service:8081
DMS_JWT_AUDIENCE=account
DMS_JWT_METADATA_ADDRESS=http://dms-config-service:8081/.well-known/openid-configuration
DMS_JWT_REQUIRE_HTTPS_METADATA=false
DMS_JWT_ROLE_CLAIM_TYPE=http://schemas.microsoft.com/ws/2008/06/identity/claims/role
DMS_JWT_CLIENT_ROLE=dms-client
DMS_JWT_CLOCK_SKEW_SECONDS=30
DMS_JWT_REFRESH_INTERVAL_MINUTES=60
DMS_JWT_AUTOMATIC_REFRESH_INTERVAL_HOURS=24

# Configuration Service Client
CONFIG_SERVICE_URL=http://dms-config-service:8081
CONFIG_SERVICE_CLIENT_ID=CMSAuthMetadataReadOnlyAccess
CONFIG_SERVICE_CLIENT_SECRET=s3creT@09
CONFIG_SERVICE_CLIENT_SCOPE=edfi_admin_api/authMetadata_readonly_access
CACHE_EXPIRATION_MINUTES=10

# Database Connection
DATABASE_CONNECTION_STRING=host=dms-postgresql;port=5432;username=postgres;password=${POSTGRES_PASSWORD};database=${POSTGRES_DB_NAME};
DATABASE_CONNECTION_STRING_ADMIN=host=dms-postgresql;port=5432;username=postgres;password=${POSTGRES_PASSWORD};database=${POSTGRES_DB_NAME};
DATABASE_ISOLATION_LEVEL=ReadCommitted

# Config Service Database Connection
DMS_CONFIG_DATABASE_CONNECTION_STRING=host=dms-postgresql;port=5432;username=postgres;password=${POSTGRES_PASSWORD};database=${POSTGRES_DB_NAME};

# DMS Configuration Service Identity Settings
DMS_CONFIG_IDENTITY_PROVIDER=self-contained
DMS_CONFIG_IDENTITY_ALLOW_REGISTRATION=true
DMS_CONFIG_IDENTITY_SERVICE_ROLE=cms-client
DMS_CONFIG_IDENTITY_CLIENT_ROLE=dms-client
DMS_CONFIG_IDENTITY_AUTHORITY=${DMS_JWT_AUTHORITY}
DMS_CONFIG_IDENTITY_AUDIENCE=${DMS_JWT_AUDIENCE}
DMS_CONFIG_IDENTITY_CLIENT_ID=DmsConfigurationService
DMS_CONFIG_IDENTITY_CLIENT_SECRET=s3creT@09
DMS_CONFIG_IDENTITY_SCOPE=edfi_admin_api/full_access
DMS_CONFIG_IDENTITY_REQUIRE_HTTPS=false
DMS_CONFIG_IDENTITY_ROLE_CLAIM_TYPE=${DMS_JWT_ROLE_CLAIM_TYPE}
DMS_CONFIG_TOKEN_TIMEOUT_SECONDS=30
DMS_CONFIG_IDENTITY_ENCRYPTION_KEY=QWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXo0NTY3ODkwMTIz
DMS_CONFIG_IDENTITY_HASHING_ITERATIONS=210000

# Deployment Options
NEED_DATABASE_SETUP=true
DMS_CONFIG_DEPLOY_DATABASE=true
DEPLOY_DATABASE_ON_STARTUP=true
ENABLE_SWAGGER_UI=true

# OpenSearch/Search Configuration
DMS_DATASTORE=postgresql
DMS_QUERYHANDLER=postgresql
OPENSEARCH_URL=http://dms-search:9200
OPENSEARCH_HTTP_PORT=9200
OPENSEARCH_ANALYZER_PORT=9600
OPENSEARCH_DASHBOARD_PORT=5601
OPENSEARCH_INITIAL_ADMIN_PASSWORD=abcdefgh1!
OPENSEARCH_ADMIN_PASSWORD=abcdefgh1!

# Resilience parameters
FAILURE_RATIO=0.01
SAMPLING_DURATION_SECONDS=10
MINIMUM_THROUGHPUT=2
BREAK_DURATION_SECONDS=30

# Kafka Configuration
KAFKA_PORT=9092
KAFKA_UI_PORT=8088
CONNECT_SOURCE_PORT=8083
CONNECT_SINK_PORT=8085
LOAD_SEED_DATA=true

# Search Engine (OpenSearch or ElasticSearch)
SEARCH_ENGINE=OpenSearch
OPENSEARCH_PORT=9200

# ============================================================================
# Multi-Instance Database Setup
# ============================================================================
# You'll need to manually create these databases after deployment:
#
# docker exec -it dms-postgresql psql -U postgres -c "CREATE DATABASE edfi_datamanagementservice_d255901_sy2024;"
# docker exec -it dms-postgresql psql -U postgres -c "CREATE DATABASE edfi_datamanagementservice_d255901_sy2025;"
# docker exec -it dms-postgresql psql -U postgres -c "CREATE DATABASE edfi_datamanagementservice_d255902_sy2024;"
#
# Then deploy schema to each:
# Set-Location eng/docker-compose
# Import-Module ./setup-database-template.psm1
# Deploy-DmsSchemaToDatabase -DatabaseName "edfi_datamanagementservice_d255901_sy2024" -PostgresPassword "abcdefgh1!"
# Deploy-DmsSchemaToDatabase -DatabaseName "edfi_datamanagementservice_d255901_sy2025" -PostgresPassword "abcdefgh1!"
# Deploy-DmsSchemaToDatabase -DatabaseName "edfi_datamanagementservice_d255902_sy2024" -PostgresPassword "abcdefgh1!"
