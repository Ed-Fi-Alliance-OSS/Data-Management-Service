# JWT Configuration Testing
# This file tests various JWT configuration scenarios and edge cases
#
# Prerequisites:
# 1. Ability to modify DMS configuration (appsettings.json)
# 2. Multiple Keycloak instances or ability to simulate different scenarios
# 3. Tools to generate tokens with specific characteristics

### Variables
@keycloakUrl = http://localhost:8045
@keycloakHttpsUrl = https://localhost:8443
@dmsPort = 5198
@realm = edfi
@clientId = DmsConfigurationService
@clientSecret = s3creT%4009

###
# SECTION 1: JWT ENABLED/DISABLED TESTING
###

###
# 1.1 Test with JWT Disabled (Default Configuration)
# When JwtAuthentication:Enabled = false, all requests should pass without auth
###
# First, ensure your appsettings has: "JwtAuthentication": { "Enabled": false }
GET http://localhost:{{dmsPort}}/data/ed-fi/students
Accept: application/json

###
# 1.2 Test with JWT Enabled
# When JwtAuthentication:Enabled = true, requests without token should fail
###
# First, ensure your appsettings has: "JwtAuthentication": { "Enabled": true }
GET http://localhost:{{dmsPort}}/data/ed-fi/students
Accept: application/json

###
# SECTION 2: HTTPS METADATA TESTING (Production Scenario)
###

###
# 2.1 Test with HTTPS Metadata Required
# In production, RequireHttpsMetadata should be true
###
# Configuration needed:
# "JwtAuthentication": {
#   "Enabled": true,
#   "Authority": "https://localhost:8443/realms/edfi",
#   "RequireHttpsMetadata": true
# }

# @name getHttpsToken
POST {{keycloakHttpsUrl}}/realms/{{realm}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
&client_id={{clientId}}
&client_secret={{clientSecret}}

###
# SECTION 3: CLOCK SKEW TOLERANCE TESTING
###

###
# 3.1 Test Clock Skew Tolerance
# Default ClockSkewSeconds is 30, test with slightly expired token
###
# This requires a token that expired within the clock skew window
# In practice, you'd need to:
# 1. Get a token with very short expiry
# 2. Wait until just after expiry but within skew tolerance
# 3. Use the token - it should still work

###
# SECTION 4: METADATA REFRESH TESTING
###

###
# 4.1 Test Automatic Metadata Refresh
# The OIDC metadata should refresh periodically
###
# Configuration:
# "JwtAuthentication": {
#   "RefreshIntervalMinutes": 60,
#   "AutomaticRefreshIntervalHours": 24
# }
#
# To test:
# 1. Start DMS with above configuration
# 2. Monitor logs for metadata refresh messages
# 3. Verify tokens still validate after refresh

###
# SECTION 5: MULTIPLE AUDIENCES TESTING
###

###
# 5.1 Test with Different Audience Values
# DMS should accept tokens with configured audience
###

# Get token with specific audience claim
# @name getTokenWithAudience
POST {{keycloakUrl}}/realms/{{realm}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
&client_id={{clientId}}
&client_secret={{clientSecret}}
&audience=edfi-api

###
@audienceToken = {{getTokenWithAudience.response.body.access_token}}

###
GET http://localhost:{{dmsPort}}/data/ed-fi/students
Authorization: Bearer {{audienceToken}}
Accept: application/json

###
# SECTION 6: CUSTOM ROLE CLAIM TYPE TESTING
###

###
# 6.1 Test with Custom Role Claim Type
# Some identity providers use different claim types for roles
###
# Configuration example:
# "JwtAuthentication": {
#   "RoleClaimType": "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"
# }
#
# or
# "JwtAuthentication": {
#   "RoleClaimType": "groups"
# }

###
# SECTION 7: CLIENT-SPECIFIC JWT ROLLOUT
###

###
# 7.1 Test Gradual JWT Rollout by Client
# JWT can be enabled only for specific clients during migration
###
# Configuration:
# "JwtAuthentication": {
#   "Enabled": true,
#   "EnabledForClients": ["pilot-client-1", "pilot-client-2"]
# }

# Get token for enabled client
# @name getEnabledClientToken
POST {{keycloakUrl}}/realms/{{realm}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
&client_id=pilot-client-1
&client_secret=pilot-secret-1

###
@enabledClientToken = {{getEnabledClientToken.response.body.access_token}}

###
# This should require JWT authentication
GET http://localhost:{{dmsPort}}/data/ed-fi/students
Authorization: Bearer {{enabledClientToken}}
Accept: application/json

###
# Get token for non-enabled client (should use old auth method)
# @name getNonEnabledClientToken
POST http://localhost:{{dmsPort}}/oauth/token
Authorization: Basic non-pilot-client:non-pilot-secret
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials

###
# SECTION 8: ERROR SCENARIOS
###

###
# 8.1 Test with Malformed Token
# Should return 401 with appropriate error
###
GET http://localhost:{{dmsPort}}/data/ed-fi/students
Authorization: Bearer not.a.valid.jwt
Accept: application/json

###
# 8.2 Test with Token Missing Required Claims
# Token without necessary Ed-Fi claims
###
# This would need a specially crafted token missing clientAuthorizations

###
# 8.3 Test when Keycloak is Down
# Should handle gracefully when OIDC metadata endpoint is unavailable
###
# Configuration pointing to non-existent Keycloak:
# "JwtAuthentication": {
#   "Authority": "http://localhost:9999/realms/edfi",
#   "MetadataAddress": "http://localhost:9999/realms/edfi/.well-known/openid-configuration"
# }

###
# SECTION 9: PERFORMANCE TESTING
###

###
# 9.1 Concurrent Request Testing
# Multiple simultaneous requests with same token
###
# Run these in parallel to test token validation caching

# @name perf1
GET http://localhost:{{dmsPort}}/data/ed-fi/students?offset=0&limit=10
Authorization: Bearer {{jwtToken}}

###
# @name perf2
GET http://localhost:{{dmsPort}}/data/ed-fi/schools?offset=0&limit=10
Authorization: Bearer {{jwtToken}}

###
# @name perf3
GET http://localhost:{{dmsPort}}/data/ed-fi/staff?offset=0&limit=10
Authorization: Bearer {{jwtToken}}

###
# Configuration Best Practices:
#
# Development:
# {
#   "JwtAuthentication": {
#     "Enabled": true,
#     "Authority": "http://localhost:8045/realms/edfi",
#     "RequireHttpsMetadata": false,
#     "ClockSkewSeconds": 300
#   }
# }
#
# Production:
# {
#   "JwtAuthentication": {
#     "Enabled": true,
#     "Authority": "https://auth.example.com/realms/edfi",
#     "RequireHttpsMetadata": true,
#     "ClockSkewSeconds": 30,
#     "RefreshIntervalMinutes": 60,
#     "AutomaticRefreshIntervalHours": 12
#   }
# }
#
# Gradual Rollout:
# {
#   "JwtAuthentication": {
#     "Enabled": true,
#     "EnabledForClients": ["client1", "client2"],
#     "Authority": "https://auth.example.com/realms/edfi"
#   }
# }
###