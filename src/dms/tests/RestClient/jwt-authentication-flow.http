# JWT Authentication Flow Testing
# This file tests JWT authentication with the DMS API
# 
# Prerequisites:
# 1. Keycloak running at http://localhost:8045 (use start-keycloak.ps1)
# 2. DMS running at http://localhost:5198
# 3. Valid client configured in Keycloak realm

### Variables
@keycloakUrl = http://localhost:8045
@dmsPort = 5198
@configPort = 5126
@realm = edfi
@clientId = DmsConfigurationService
@clientSecret = s3creT@09
@encodedClientSecret = s3creT%4009

###
# 1. Get JWT Token from Keycloak
# This simulates a client getting an access token using client credentials flow
###
# @name getJwtToken
POST {{keycloakUrl}}/realms/{{realm}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
&client_id={{clientId}}
&client_secret={{encodedClientSecret}}

###
@jwtToken = {{getJwtToken.response.body.access_token}}
@tokenType = {{getJwtToken.response.body.token_type}}
@expiresIn = {{getJwtToken.response.body.expires_in}}

###
# 2. Test Discovery Endpoint (Should Allow Anonymous)
# The discovery endpoint should not require authentication
###
GET http://localhost:{{dmsPort}}/

###
# 3. Test Data Endpoint with Valid JWT
# This should succeed when JWT authentication is enabled
###
# @name getStudentsWithToken
GET http://localhost:{{dmsPort}}/data/ed-fi/students
Authorization: {{tokenType}} {{jwtToken}}
Accept: application/json

###
# 4. Test Data Endpoint without Token (Should Fail when JWT is enabled)
# When JWT authentication is enabled, this should return 401 Unauthorized
###
# @name getStudentsWithoutToken
GET http://localhost:{{dmsPort}}/data/ed-fi/students
Accept: application/json

###
# 5. Test Metadata Endpoint with JWT
# Metadata endpoints may require service role
###
# @name getMetadataWithToken
GET http://localhost:{{dmsPort}}/metadata
Authorization: {{tokenType}} {{jwtToken}}
Accept: application/json

###
# 6. Test Creating a Descriptor with JWT
# This tests write operations with authentication
###
# @name createDescriptor
POST http://localhost:{{dmsPort}}/data/ed-fi/gradeLevelDescriptors
Authorization: {{tokenType}} {{jwtToken}}
Content-Type: application/json

{
    "namespace": "uri://ed-fi.org/GradeLevelDescriptor",
    "codeValue": "First Grade",
    "shortDescription": "First Grade"
}

###
@descriptorLocation = {{createDescriptor.response.headers.location}}

###
# 7. Test Retrieving Created Descriptor
# This verifies the descriptor was created and can be retrieved
###
GET {{descriptorLocation}}
Authorization: {{tokenType}} {{jwtToken}}
Accept: application/json

###
# 8. Test with Invalid Bearer Token
# This should return 401 Unauthorized
###
GET http://localhost:{{dmsPort}}/data/ed-fi/students
Authorization: Bearer invalid-token-here
Accept: application/json

###
# 9. Test with Wrong Authorization Type
# Using Basic auth instead of Bearer should fail
###
GET http://localhost:{{dmsPort}}/data/ed-fi/students
Authorization: Basic dXNlcjpwYXNzd29yZA==
Accept: application/json

###
# 10. Test Token Endpoint (OAuth)
# The token endpoint should accept Basic auth for client credentials
###
# @name getDmsToken
POST http://localhost:{{dmsPort}}/oauth/token
Authorization: Basic {{clientId}}:{{clientSecret}}
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials

###
# 11. Test Expired Token Simulation
# Note: In real testing, you'd need to wait for token expiry or use a pre-expired token
# This is just a placeholder to document the test case
###
# GET http://localhost:{{dmsPort}}/data/ed-fi/students
# Authorization: Bearer <expired-token-here>
# Accept: application/json

###
# 12. Clean Up - Delete Created Descriptor
# Clean up test data
###
DELETE {{descriptorLocation}}
Authorization: {{tokenType}} {{jwtToken}}

###
# Expected Results Summary:
# 
# When JWT is DISABLED (default):
# - All requests pass through without authentication
# - No 401 errors for missing tokens
# - Basic auth works for token endpoint
#
# When JWT is ENABLED:
# - Requests without valid Bearer token return 401
# - Requests with valid token are processed
# - Discovery endpoint remains anonymous
# - Token endpoint accepts Basic auth
# - Invalid tokens return 401
# - Wrong auth schemes return 401
###