# JWT Client Authorizations Testing
# This file tests namespace and education organization restrictions from JWT claims
#
# Prerequisites:
# 1. Keycloak configured with clients having different authorization claims
# 2. DMS running with JWT authentication enabled
# 3. JWT tokens containing EdFi-specific authorization claims

### Variables
@keycloakUrl = http://localhost:8045
@dmsPort = 5198
@configPort = 5126
@realm = edfi

### Namespace-Restricted Client
# This client should have namespace prefix restrictions in its JWT
@namespaceClientId = namespace-restricted-client
@namespaceClientSecret = namespace-secret-123

### Education Organization Restricted Client
# This client should have education organization restrictions
@edOrgClientId = edorg-restricted-client
@edOrgClientSecret = edorg-secret-123

### Unrestricted Client
# This client has no namespace or edorg restrictions
@unrestrictedClientId = unrestricted-client
@unrestrictedClientSecret = unrestricted-secret-123

###
# SECTION 1: NAMESPACE RESTRICTIONS
###

###
# 1.1 Get Token with Namespace Restrictions
# This token should contain namespace prefix claims like:
# "namespacePrefixes": ["uri://allowed-namespace.org", "uri://ed-fi.org"]
###
# @name getNamespaceToken
POST {{keycloakUrl}}/realms/{{realm}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
&client_id={{namespaceClientId}}
&client_secret={{namespaceClientSecret}}

###
@namespaceToken = {{getNamespaceToken.response.body.access_token}}

###
# 1.2 Test Creating Resource in Allowed Namespace
# This should succeed if the namespace matches the token's allowed prefixes
###
# @name createInAllowedNamespace
POST http://localhost:{{dmsPort}}/data/ed-fi/academicWeekDescriptors
Authorization: Bearer {{namespaceToken}}
Content-Type: application/json

{
    "namespace": "uri://ed-fi.org/AcademicWeekDescriptor",
    "codeValue": "Week 1",
    "shortDescription": "First Week"
}

###
@allowedDescriptorLocation = {{createInAllowedNamespace.response.headers.location}}

###
# 1.3 Test Creating Resource in Disallowed Namespace
# This should fail with 403 Forbidden if namespace is not in allowed list
###
# @name createInDisallowedNamespace
POST http://localhost:{{dmsPort}}/data/ed-fi/academicWeekDescriptors
Authorization: Bearer {{namespaceToken}}
Content-Type: application/json

{
    "namespace": "uri://disallowed-namespace.org/AcademicWeekDescriptor",
    "codeValue": "Week 2",
    "shortDescription": "Second Week"
}

###
# 1.4 Test Reading Resources (Should see only allowed namespaces)
# GET operations may filter results based on namespace restrictions
###
GET http://localhost:{{dmsPort}}/data/ed-fi/academicWeekDescriptors
Authorization: Bearer {{namespaceToken}}
Accept: application/json

###
# SECTION 2: EDUCATION ORGANIZATION RESTRICTIONS
###

###
# 2.1 Get Token with Education Organization Restrictions
# This token should contain education organization claims like:
# "educationOrganizationIds": [123, 456]
###
# @name getEdOrgToken
POST {{keycloakUrl}}/realms/{{realm}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
&client_id={{edOrgClientId}}
&client_secret={{edOrgClientSecret}}

###
@edOrgToken = {{getEdOrgToken.response.body.access_token}}

###
# 2.2 First, create test schools with unrestricted token
###
# @name getUnrestrictedToken
POST {{keycloakUrl}}/realms/{{realm}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
&client_id={{unrestrictedClientId}}
&client_secret={{unrestrictedClientSecret}}

###
@unrestrictedToken = {{getUnrestrictedToken.response.body.access_token}}

###
# Create allowed school (ID: 123)
# @name createAllowedSchool
POST http://localhost:{{dmsPort}}/data/ed-fi/schools
Authorization: Bearer {{unrestrictedToken}}
Content-Type: application/json

{
    "schoolId": 123,
    "nameOfInstitution": "Allowed Elementary School",
    "educationOrganizationCategories": [
        {
            "educationOrganizationCategoryDescriptor": "uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School"
        }
    ],
    "gradeLevels": [
        {
            "gradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#First Grade"
        }
    ]
}

###
@allowedSchoolLocation = {{createAllowedSchool.response.headers.location}}

###
# Create disallowed school (ID: 999)
# @name createDisallowedSchool
POST http://localhost:{{dmsPort}}/data/ed-fi/schools
Authorization: Bearer {{unrestrictedToken}}
Content-Type: application/json

{
    "schoolId": 999,
    "nameOfInstitution": "Disallowed High School",
    "educationOrganizationCategories": [
        {
            "educationOrganizationCategoryDescriptor": "uri://ed-fi.org/EducationOrganizationCategoryDescriptor#School"
        }
    ],
    "gradeLevels": [
        {
            "gradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#Ninth Grade"
        }
    ]
}

###
@disallowedSchoolLocation = {{createDisallowedSchool.response.headers.location}}

###
# 2.3 Test Accessing Allowed Education Organization
# This should succeed if schoolId 123 is in the token's allowed list
###
# @name getAllowedSchool
GET http://localhost:{{dmsPort}}/data/ed-fi/schools?schoolId=123
Authorization: Bearer {{edOrgToken}}
Accept: application/json

###
# 2.4 Test Accessing Disallowed Education Organization
# This should return empty results or 403 if schoolId 999 is not allowed
###
# @name getDisallowedSchool
GET http://localhost:{{dmsPort}}/data/ed-fi/schools?schoolId=999
Authorization: Bearer {{edOrgToken}}
Accept: application/json

###
# 2.5 Test Creating Student in Allowed School
# This should succeed
###
# @name createStudentInAllowedSchool
POST http://localhost:{{dmsPort}}/data/ed-fi/students
Authorization: Bearer {{edOrgToken}}
Content-Type: application/json

{
    "studentUniqueId": "123456",
    "firstName": "John",
    "lastSurname": "Doe",
    "birthDate": "2010-01-01"
}

###
@studentLocation = {{createStudentInAllowedSchool.response.headers.location}}

###
# @name enrollStudentInAllowedSchool
POST http://localhost:{{dmsPort}}/data/ed-fi/studentSchoolAssociations
Authorization: Bearer {{edOrgToken}}
Content-Type: application/json

{
    "studentReference": {
        "studentUniqueId": "123456"
    },
    "schoolReference": {
        "schoolId": 123
    },
    "entryDate": "2023-08-01",
    "entryGradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#First Grade"
}

###
# 2.6 Test Creating Student Association with Disallowed School
# This should fail
###
# @name enrollStudentInDisallowedSchool
POST http://localhost:{{dmsPort}}/data/ed-fi/studentSchoolAssociations
Authorization: Bearer {{edOrgToken}}
Content-Type: application/json

{
    "studentReference": {
        "studentUniqueId": "123456"
    },
    "schoolReference": {
        "schoolId": 999
    },
    "entryDate": "2023-08-01",
    "entryGradeLevelDescriptor": "uri://ed-fi.org/GradeLevelDescriptor#Ninth Grade"
}

###
# SECTION 3: COMBINED RESTRICTIONS
###

###
# 3.1 Test with Both Namespace and EdOrg Restrictions
# Real-world scenarios often have both types of restrictions
###
# Note: This would require a specially configured client in Keycloak
# with both namespace prefixes and education organization IDs

###
# SECTION 4: UNRESTRICTED ACCESS
###

###
# 4.1 Test Unrestricted Client Access
# This client should be able to access all resources
###
GET http://localhost:{{dmsPort}}/data/ed-fi/schools
Authorization: Bearer {{unrestrictedToken}}
Accept: application/json

###
# CLEANUP
###

###
# Clean up created resources
DELETE {{allowedDescriptorLocation}}
Authorization: Bearer {{namespaceToken}}

###
DELETE {{studentLocation}}
Authorization: Bearer {{edOrgToken}}

###
DELETE {{allowedSchoolLocation}}
Authorization: Bearer {{unrestrictedToken}}

###
DELETE {{disallowedSchoolLocation}}
Authorization: Bearer {{unrestrictedToken}}

###
# Expected JWT Claims Structure:
#
# Namespace-restricted token payload:
# {
#   "clientAuthorizations": {
#     "tokenId": "namespace-restricted-client",
#     "claimSetName": "E2E-NameSpaceBasedClaimSet",
#     "namespacePrefixes": [
#       "uri://ed-fi.org",
#       "uri://allowed-namespace.org"
#     ],
#     "educationOrganizationIds": []
#   }
# }
#
# EdOrg-restricted token payload:
# {
#   "clientAuthorizations": {
#     "tokenId": "edorg-restricted-client",
#     "claimSetName": "E2E-EdOrgBasedClaimSet",
#     "namespacePrefixes": [],
#     "educationOrganizationIds": [123, 456]
#   }
# }
#
# Combined restrictions token payload:
# {
#   "clientAuthorizations": {
#     "tokenId": "combined-client",
#     "claimSetName": "E2E-CombinedClaimSet",
#     "namespacePrefixes": ["uri://ed-fi.org"],
#     "educationOrganizationIds": [123]
#   }
# }
###