/*
 * SPDX-License-Identifier: Apache-2.0
 * Licensed to the Ed-Fi Alliance under one or more agreements.
 * The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
 * See the LICENSE and NOTICES files in the project root for more information.
 */

#5126 or 8081
@configPort=8081

#5198 or 8080
@dmsPort=8080
@sysAdminId=sys-admin
@sysAdminSecret=SdfH)98&Jk
@encodedSysAdminSecret=SdfH%2998%26Jk

#
# Create a new system administrator and create a token
#

### Create the system administrator credentials
POST http://localhost:{{configPort}}/connect/register
Content-Type: application/x-www-form-urlencoded

ClientId={{sysAdminId}}
&ClientSecret={{encodedSysAdminSecret}}
&DisplayName=System Administrator

### Create a token
# @name configTokenRequest
POST http://localhost:{{configPort}}/connect/token
Content-Type: application/x-www-form-urlencoded

client_id={{sysAdminId}}
&client_secret={{encodedSysAdminSecret}}
&grant_type=client_credentials
&scope=edfi_admin_api/full_access


###
@configToken={{configTokenRequest.response.body.access_token}}

#
# Create vendor, application, and new DMS client credentials
#

### Create a new vendor
# @name createVendor
POST http://localhost:{{configPort}}/v2/vendors
Content-Type: application/json
Authorization: bearer {{configToken}}

{
    "company": "Demo Vendor",
    "contactName": "George Washington",
    "contactEmailAddress": "george@example.com",
    "namespacePrefixes": "uri://ed-fi.org"
}

###
@vendorLocation={{createVendor.response.headers.location}}

### Retrieve the vendor so that we can extract the Id
# @name getVendor
GET {{vendorLocation}}
Authorization: bearer {{configToken}}

###
@vendorId={{getVendor.response.body.id}}

### Create a DMS instance
# @name createDmsInstance
POST http://localhost:{{configPort}}/v2/dmsInstances
Content-Type: application/json
Authorization: bearer {{configToken}}

{
    "instanceType": "Test",
    "instanceName": "Test DMS Instance",
    "connectionString": "host=dms-postgresql;port=5432;username=postgres;password=abcdefgh1!;database=edfi_datamanagementservice;"
}

###
@dmsInstanceId={{createDmsInstance.response.body.id}}

### Create a new application
# @name createApplication
POST http://localhost:{{configPort}}/v2/applications
Content-Type: application/json
Authorization: bearer {{configToken}}

{
    "vendorId": {{vendorId}},
    "applicationName": "Demo application2",
    "claimSetName": "E2E-NoFurtherAuthRequiredClaimSet",
    "educationOrganizationIds": [6001010],
    "dmsInstanceIds": [{{dmsInstanceId}}]
}

###
@clientKey={{createApplication.response.body.key}}
@clientSecret={{createApplication.response.body.secret}}

### Read the Token URL from the Discovery API
# @name discovery
GET http://localhost:{{dmsPort}}

###
@dataApi={{discovery.response.body.urls.dataManagementApi}}
@tokenUrl={{discovery.response.body.urls.oauth}}

### Create a DMS token
# @name dmsTokenRequest
POST {{tokenUrl}}
Authorization: basic {{clientKey}}:{{clientSecret}}
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials

###
@dmsToken={{dmsTokenRequest.response.body.access_token}}

### Create descriptor
#
POST {{dataApi}}/ed-fi/educationOrganizationCategoryDescriptors
Authorization: bearer {{dmsToken}}
Content-Type: application/json

{
    "namespace": "uri://ed-fi.org/educationOrganizationCategoryDescriptor",
    "codeValue": "XYZ",
    "shortDescription": "XYZ"
}

### Create descriptor
POST {{dataApi}}/ed-fi/gradeLevelDescriptors
Authorization: bearer {{dmsToken}}
Content-Type: application/json

{
    "namespace": "uri://ed-fi.org/gradeLevelDescriptor",
    "codeValue": "Tenth Grade",
    "shortDescription": "Tenth Grade"
}

### Create School
# @name createSchool
POST {{dataApi}}/ed-fi/schools
Authorization: bearer {{dmsToken}}

{
    "schoolId": 6001010,
    "nameOfInstitution": "Bayside High School",
    "educationOrganizationCategories": [
        {
            "educationOrganizationCategoryDescriptor": "uri://ed-fi.org/educationOrganizationCategoryDescriptor#XYZ"
        }
    ],
    "gradeLevels": [
        {
            "gradeLevelDescriptor": "uri://ed-fi.org/gradeLevelDescriptor#Tenth Grade"
        }
    ]
}

### Create School
# @name createSchool2
POST {{dataApi}}/ed-fi/schools
Authorization: bearer {{dmsToken}}

{
    "schoolId": 6001011,
    "nameOfInstitution": "Westside High School",
    "educationOrganizationCategories": [
        {
            "educationOrganizationCategoryDescriptor": "uri://ed-fi.org/educationOrganizationCategoryDescriptor#XYZ"
        }
    ],
    "gradeLevels": [
        {
            "gradeLevelDescriptor": "uri://ed-fi.org/gradeLevelDescriptor#Tenth Grade"
        }
    ]
}

### Create Student
# @name createStudent
POST {{dataApi}}/ed-fi/students
Authorization: bearer {{dmsToken}}

{
    "studentUniqueId": "604823",
    "birthDate": "2008-09-13",
    "firstName": "Lisa",
    "lastSurname": "Woods",
    "middleName": "Sybil",
    "personalTitlePrefix": "Ms",
    "preferredFirstName": "Lisarae",
    "preferredLastSurname": "Woodlock",
    "identificationDocuments": [],
    "otherNames": [],
    "personalIdentificationDocuments": [],
    "visas": []
}

### Create Student
# @name createStudent2
POST {{dataApi}}/ed-fi/students
Authorization: bearer {{dmsToken}}

{
    "studentUniqueId": "604824",
    "birthDate": "2008-09-13",
    "firstName": "Lisa",
    "lastSurname": "Woods",
    "middleName": "Sybil",
    "personalTitlePrefix": "Ms",
    "preferredFirstName": "Lisarae",
    "preferredLastSurname": "Woodlock",
    "identificationDocuments": [],
    "otherNames": [],
    "personalIdentificationDocuments": [],
    "visas": []
}

### Create StudentSchoolAssociation
# @name createStudentSchoolAssociation
POST {{dataApi}}/ed-fi/studentSchoolAssociations
Authorization: bearer {{dmsToken}}

{
    "entryDate": "2021-08-23",
    "entryGradeLevelDescriptor": "uri://ed-fi.org/gradeLevelDescriptor#Tenth Grade",
    "schoolReference": {
      "schoolId": 6001010
    },
    "studentReference": {
      "studentUniqueId": "604823"
    }
}

### Create StudentSchoolAssociation
POST {{dataApi}}/ed-fi/studentSchoolAssociations
Authorization: bearer {{dmsToken}}

{
    "entryDate": "2021-08-23",
    "entryGradeLevelDescriptor": "uri://ed-fi.org/gradeLevelDescriptor#Tenth Grade",
    "schoolReference": {
      "schoolId": 6001011
    },
    "studentReference": {
      "studentUniqueId": "604824"
    }
}

### GET StudentSchoolAssociation
# @name getStudentSchoolAssociation
GET {{createStudentSchoolAssociation.response.headers.location}}
Authorization: bearer {{dmsToken}}

@studentSchoolAssociationId = {{getStudentSchoolAssociation.response.body.id}}

### Create contact
# @name createContact
POST {{dataApi}}/ed-fi/contacts
Authorization: bearer {{dmsToken}}

 {
     "contactUniqueId": "6666666",
     "firstName": "contactfirstname",
     "lastSurname": "contactlastname"
 }

### GET Contact
# @name getContact
GET {{createContact.response.headers.location}}
Authorization: bearer {{dmsToken}}

### Create student contact association
# @name createStudentContactAssociation1
POST {{dataApi}}/ed-fi/studentcontactassociations
Authorization: bearer {{dmsToken}}

{
      "studentReference": {
       "studentUniqueId": "604824"
     },
     "contactReference": {
       "contactUniqueId": "6666666"
     }
 }

### GET Contact
# @name getStudentContactAssociation1
GET {{createStudentContactAssociation1.response.headers.location}}
Authorization: bearer {{dmsToken}}

@studentContactAssociationId = {{getStudentContactAssociation1.response.body.id}}

### Verify ContactStudentSchoolAuthorization Table
### SELECT * FROM dms.ContactStudentSchoolAuthorization;

### Verify the ContactSecurableDocument
### SELECT * FROM dms.ContactSecurableDocument

### Verify Documents to have Contact and StudentContactAssociation records with contactstudentschoolauthorizationedorgids

### Create second student contact association with same contact
# @name createStudentContactAssociation2
POST {{dataApi}}/ed-fi/studentcontactassociations
Authorization: bearer {{dmsToken}}

{
      "studentReference": {
       "studentUniqueId": "604823"
     },
     "contactReference": {
       "contactUniqueId": "6666666"
     }
 }

### GET student contact association
# @name getStudentContactAssociation2
GET {{createStudentContactAssociation2.response.headers.location}}
Authorization: bearer {{dmsToken}}

### Verify ContactStudentSchoolAuthorization Table
### SELECT * FROM dms.ContactStudentSchoolAuthorization;

### Verify the ContactSecurableDocument
### SELECT * FROM dms.ContactSecurableDocument

### Verify Documents to have Contact and StudentContactAssociation records with contactstudentschoolauthorizationedorgids
### contactstudentschoolauthorizationedorgids will have ed org ids associated with both the students for all the contact securable records

### Delete Student contact association
DELETE {{createStudentContactAssociation2.response.headers.location}}
Authorization: bearer {{dmsToken}}

### Verify ContactStudentSchoolAuthorization Table - should not have record for createStudentContactAssociation2
### SELECT * FROM dms.ContactStudentSchoolAuthorization;

### Verify the ContactSecurableDocument - should not have record for createStudentContactAssociation2
### SELECT * FROM dms.ContactSecurableDocument

### Verify Documents to have Contact and StudentContactAssociation records with contactstudentschoolauthorizationedorgids
### contactstudentschoolauthorizationedorgids will have ed org ids associated only with student(604824) for all the contact securable records

### Update StudentContactAssociation
# @name updateStudentContactAssociation
PUT {{createStudentContactAssociation1.response.headers.location}}
Authorization: bearer {{dmsToken}}

{
    "id": "{{studentContactAssociationId}}",
    "studentReference": {
       "studentUniqueId": "604824"
     },
     "contactReference": {
       "contactUniqueId": "6666666"
     },
     "contactPriority": 1
}

### Query Contacts - should return 1 record
###
GET {{dataApi}}/ed-fi/contacts
Authorization: bearer {{dmsToken}}

### Create a new application
# @name createApplication2
POST http://localhost:{{configPort}}/v2/applications
Content-Type: application/json
Authorization: bearer {{configToken}}

{
    "vendorId": {{vendorId}},
    "applicationName": "Demo application 2",
    "claimSetName": "EdFiSandbox",
    "educationOrganizationIds": [123456789],
    "dmsInstanceId": {{dmsInstanceId}}
}

###
@clientKey2={{createApplication2.response.body.key}}
@clientSecret2={{createApplication2.response.body.secret}}

### Create a DMS token
# @name sandboxTokenRequest
POST {{tokenUrl}}
Authorization: basic {{clientKey2}}:{{clientSecret2}}
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials

###
@sandboxToken={{sandboxTokenRequest.response.body.access_token}}

### Get Contacts
###
GET {{dataApi}}/ed-fi/contacts
Authorization: bearer {{sandboxToken}}

### Create a new application with EdFiSandbox claim set
# @name createApplication3
POST http://localhost:{{configPort}}/v2/applications
Content-Type: application/json
Authorization: bearer {{configToken}}

{
    "vendorId": {{vendorId}},
    "applicationName": "Demo application 3",
    "claimSetName": "EdFiSandbox",
    "educationOrganizationIds": [6001011],
    "dmsInstanceId": {{dmsInstanceId}}
}

###
@clientKey3={{createApplication3.response.body.key}}
@clientSecret3={{createApplication3.response.body.secret}}

### Create a DMS token
# @name sandboxTokenResponse
POST {{tokenUrl}}
Authorization: basic {{clientKey3}}:{{clientSecret3}}
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials

###
@EdFiSandboxToken={{sandboxTokenResponse.response.body.access_token}}

### Create contact
# @name createContact
POST {{dataApi}}/ed-fi/contacts
Authorization: bearer {{EdFiSandboxToken}}

 {
     "contactUniqueId": "77777",
     "firstName": "contactfirstname",
     "lastSurname": "contactlastname"
 }

### Create second student contact association with same contact
# @name createStudentContactAssociation3
POST {{dataApi}}/ed-fi/studentcontactassociations
Authorization: bearer {{EdFiSandboxToken}}

{
      "studentReference": {
       "studentUniqueId": "604824"
     },
     "contactReference": {
       "contactUniqueId": "77777"
     }
}


### GET contact
# @name getContact
GET {{createContact.response.headers.location}}
Authorization: bearer {{EdFiSandboxToken}}

###
@contactId={{getContact.response.body.id}}

### Update contact
# @name updateContact
PUT {{createContact.response.headers.location}}
Authorization: bearer {{EdFiSandboxToken}}

{
    "id": "{{contactId}}",
    "contactUniqueId": "77777",
    "firstName": "contactfirstname-update",
    "lastSurname": "contactlastname-update"
}

### Get student contact association
# @name getStudentContactAssociation3
GET {{createStudentContactAssociation3.response.headers.location}}
Authorization: bearer {{EdFiSandboxToken}}

###
@studentContactAssociationId3={{getStudentContactAssociation3.response.body.id}}

### Update StudentContactAssociation
# @name updateStudentContactAssociation3
PUT {{createStudentContactAssociation3.response.headers.location}}
Authorization: bearer {{EdFiSandboxToken}}

{
    "id": "{{studentContactAssociationId3}}",
    "studentReference": {
       "studentUniqueId": "604824"
     },
     "contactReference": {
       "contactUniqueId": "77777"
     },
     "contactPriority": 1
}

### Get Contacts should return 2 records
GET {{dataApi}}/ed-fi/contacts
Authorization: bearer {{EdFiSandboxToken}}

### Delete student contact association (604824->77777)
DELETE {{createStudentContactAssociation3.response.headers.location}}
Authorization: bearer {{EdFiSandboxToken}}

### Get Contacts should return 1 record
GET {{dataApi}}/ed-fi/contacts
Authorization: bearer {{EdFiSandboxToken}}

### No student school association, should be able to delete contact 77777
DELETE {{createContact.response.headers.location}}
Authorization: bearer {{EdFiSandboxToken}}

