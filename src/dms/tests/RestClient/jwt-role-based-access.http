# JWT Role-Based Access Testing
# This file tests role-based authorization with JWT tokens
#
# Prerequisites:
# 1. Keycloak running with multiple clients configured with different roles
# 2. DMS running with JWT authentication enabled
# 3. Clients configured with different role assignments

### Variables
@keycloakUrl = http://localhost:8045
@dmsPort = 5198
@realm = edfi

### Service Role Client (has 'service' role for metadata/management access)
@serviceClientId = DmsConfigurationService
@serviceClientSecret = s3creT%4009

### Basic Client (no special roles, just basic API access)
@basicClientId = basic-api-client
@basicClientSecret = basic-secret-123

###
# 1. Get Token with Service Role
# This client should have the 'service' role assigned in Keycloak
###
# @name getServiceRoleToken
POST {{keycloakUrl}}/realms/{{realm}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
&client_id={{serviceClientId}}
&client_secret={{serviceClientSecret}}

###
@serviceToken = {{getServiceRoleToken.response.body.access_token}}

###
# 2. Get Token without Service Role
# This client should NOT have the 'service' role
###
# @name getBasicToken
POST {{keycloakUrl}}/realms/{{realm}}/protocol/openid-connect/token
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials
&client_id={{basicClientId}}
&client_secret={{basicClientSecret}}

###
@basicToken = {{getBasicToken.response.body.access_token}}

###
# 3. Test Metadata Endpoint with Service Role (Should Succeed)
# Metadata endpoints typically require the 'service' role
###
# @name metadataWithServiceRole
GET http://localhost:{{dmsPort}}/metadata
Authorization: Bearer {{serviceToken}}
Accept: application/json

###
# 4. Test Metadata Endpoint without Service Role (May Fail)
# This depends on whether metadata endpoint requires service role
###
# @name metadataWithoutServiceRole
GET http://localhost:{{dmsPort}}/metadata
Authorization: Bearer {{basicToken}}
Accept: application/json

###
# 5. Test Management Health Endpoint with Service Role
# Management endpoints may require elevated privileges
###
# @name healthWithServiceRole
GET http://localhost:{{dmsPort}}/management/health
Authorization: Bearer {{serviceToken}}
Accept: application/json

###
# 6. Test Management Health Endpoint without Service Role
# This may return 403 Forbidden if role is required
###
# @name healthWithoutServiceRole
GET http://localhost:{{dmsPort}}/management/health
Authorization: Bearer {{basicToken}}
Accept: application/json

###
# 7. Test Data Endpoints with Basic Token (Should Work)
# Regular data endpoints should work with any valid token
###
# @name dataWithBasicToken
GET http://localhost:{{dmsPort}}/data/ed-fi/students
Authorization: Bearer {{basicToken}}
Accept: application/json

###
# 8. Test Data Endpoints with Service Token (Should Also Work)
# Service role should have access to all endpoints
###
# @name dataWithServiceToken
GET http://localhost:{{dmsPort}}/data/ed-fi/students
Authorization: Bearer {{serviceToken}}
Accept: application/json

###
# 9. Test Creating Resources with Different Roles
# Both should work for data endpoints
###
# @name createWithBasicToken
POST http://localhost:{{dmsPort}}/data/ed-fi/absenceEventCategoryDescriptors
Authorization: Bearer {{basicToken}}
Content-Type: application/json

{
    "namespace": "uri://ed-fi.org/AbsenceEventCategoryDescriptor",
    "codeValue": "Excused",
    "shortDescription": "Excused Absence"
}

###
@basicDescriptorLocation = {{createWithBasicToken.response.headers.location}}

###
# @name createWithServiceToken
POST http://localhost:{{dmsPort}}/data/ed-fi/absenceEventCategoryDescriptors
Authorization: Bearer {{serviceToken}}
Content-Type: application/json

{
    "namespace": "uri://ed-fi.org/AbsenceEventCategoryDescriptor",
    "codeValue": "Unexcused",
    "shortDescription": "Unexcused Absence"
}

###
@serviceDescriptorLocation = {{createWithServiceToken.response.headers.location}}

###
# 10. Test Discovery Endpoint (Should be Anonymous)
# Discovery should work without any authentication
###
GET http://localhost:{{dmsPort}}/
Accept: application/json

###
# 11. Clean Up - Delete Created Resources
###
DELETE {{basicDescriptorLocation}}
Authorization: Bearer {{basicToken}}

###
DELETE {{serviceDescriptorLocation}}
Authorization: Bearer {{serviceToken}}

###
# Expected Results Summary:
#
# Service Role Token:
# - ✓ Access to all data endpoints
# - ✓ Access to metadata endpoints
# - ✓ Access to management endpoints
# - ✓ Full CRUD operations
#
# Basic Token (no service role):
# - ✓ Access to all data endpoints
# - ? Access to metadata endpoints (depends on configuration)
# - ✗ Access to management endpoints (403 Forbidden expected)
# - ✓ Full CRUD operations on data
#
# No Token:
# - ✓ Access to discovery endpoint
# - ✗ Access to all other endpoints (401 Unauthorized)
###

###
# Role Configuration Notes:
#
# In Keycloak, roles are typically configured as:
# 1. Realm Roles: Applied across all clients in the realm
# 2. Client Roles: Specific to individual clients
#
# The JWT should contain roles in the configured claim type
# (default: "role" or "http://schemas.microsoft.com/ws/2008/06/identity/claims/role")
#
# Example JWT payload with roles:
# {
#   "exp": 1234567890,
#   "iat": 1234567890,
#   "iss": "http://localhost:8045/realms/edfi",
#   "sub": "client-id",
#   "aud": "account",
#   "role": ["service", "dms-client"],
#   ...
# }
###