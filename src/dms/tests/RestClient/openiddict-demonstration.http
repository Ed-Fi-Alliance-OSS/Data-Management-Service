
### INSTRUCTIONS: How to run this test and prepare the environment
# 1. Open a PowerShell terminal in the root of your workspace.
# 2. The script `start-local-dms.ps1` is located in `eng/docker-compose`. Change to that directory if needed.
# 3. Before starting, rename `eng/docker-compose/.env.openiddict.example` to `.env` in the same directory so it will be used in execution.
# 4. Run the following command to start the local DMS environment with the required options:
#
#     .\start-local-dms.ps1 -EnableSearchEngineUI -EnableConfig -r -IdentityProvider self-contained -EnvironmentFile .env -EnableSwaggerUI
#
# 5. Wait for all services to start. Ensure that both the DMS and Configuration Service are running and accessible at the ports specified in this file (8080 for DMS, 8081 for Config).
# 6. Once the environment is ready, use the REST Client extension in VS Code to execute the requests in this file. You can run each request by clicking "Send Request" above each HTTP block.
#
# This will allow you to test authentication, token generation, and API access as described below.
@dmsPort=8080
@configPort=8081

@sysAdminId=DmsConfigurationService
@sysAdminSecret=s3creT@09

###
# Create a token to test basic authentication with the DMS (only for self-contained OpenIddict server)
POST {{tokenUrl}}
Authorization: basic {{sysAdminId}}:{{sysAdminSecret}}
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials

### Create a Configuration Service token
# @name configTokenRequest
POST http://localhost:{{configPort}}/connect/token
Content-Type: application/x-www-form-urlencoded

client_id={{sysAdminId}}
&client_secret={{sysAdminSecret}}
&grant_type=client_credentials
&scope=edfi_admin_api/full_access

### Read the token from the response body
@configToken={{configTokenRequest.response.body.access_token}}

### Create a new vendor
# @name createVendor
POST http://localhost:{{configPort}}/v2/vendors
Content-Type: application/json
Authorization: bearer {{configToken}}

{
    "company": "Demo Vendor {{$randomInt 0 9999999}}",
    "contactName": "George Washington",
    "contactEmailAddress": "george@example.com",
    "namespacePrefixes": "uri://ed-fi.org"
}

### Read the newly-created Vendor ID from the response body
@vendorId={{createVendor.response.body.id}}

### Create a new application for working with education organizations
# @name edOrgApplication
POST http://localhost:{{configPort}}/v2/applications
Content-Type: application/json
Authorization: bearer {{configToken}}

{
    "vendorId": {{vendorId}},
    "applicationName": "For ed orgs",
    "claimSetName": "E2E-RelationshipsWithEdOrgsOnlyClaimSet",
    "educationOrganizationIds": [ 255, 255901 ]
}

###
GET http://localhost:{{configPort}}/authorizationMetadata?claimSetName=E2E-RelationshipsWithEdOrgsOnlyClaimSet
Authorization: bearer {{configToken}}

###
@edOrgClientId={{edOrgApplication.response.body.key}}
@edOrgSecret={{edOrgApplication.response.body.secret}}

###
# @name discovery
GET http://localhost:{{dmsPort}}

### Read the Token URL from the Discovery API
@tokenUrl={{discovery.response.body.urls.oauth}}

### Read the base URL for all Descriptors and Resources from the Discovery API response
@dataApi={{discovery.response.body.urls.dataManagementApi}}
@dataApi=http://localhost:{{dmsPort}}/data
# At last, we can authenticate with the DMS using the client credentials we
# generated with the DMS Configuration Service.


###
# @name edOrgTokenRequest
POST {{tokenUrl}}
Authorization: basic {{edOrgClientId}}:{{edOrgSecret}}
Content-Type: application/x-www-form-urlencoded

grant_type=client_credentials

### Read the DMS token from the response body
@edOrgToken={{edOrgTokenRequest.response.body.access_token}}

###
@dependenciesUrl={{discovery.response.body.urls.dependencies}}

###
GET {{dependenciesUrl}}

###
POST {{dataApi}}/ed-fi/gradeLevelDescriptors
Authorization: bearer {{edOrgToken}}
Content-Type: application/json

{
  "namespace": "uri://ed-fi.org/GradeLevelDescriptor",
  "codeValue": "Ninth Grade",
  "shortDescription": "9th Grade"
}
### Read the created object
GET {{dataApi}}/ed-fi/gradeLevelDescriptors
Authorization: bearer {{edOrgToken}}
Content-Type: application/json

### Send an invalid/expired token to see what happens
@expiredToken = eyJhbGciOiJSUzI1NiIsImtpZCI6InNhbXBsZS1rZXktaWQtMDAxIiwidHlwIjoiSldUIn0.eyJqdGkiOiI0NmZmZGJjYS0zOTAwLTQ2MzItYWI3Yi04ZTI0Njk0ZDA1YTgiLCJzdWIiOiIwNmVkZDU4Yi1kM2FkLTQyZWUtYmMwOS1kMmVmYTY5ZjQwZmQiLCJpYXQiOiIxNzU1MDI2Nzc4IiwiZXhwIjoiMTc1NTAzMDM3OCIsImNsaWVudF9pZCI6IjA2ZWRkNThiLWQzYWQtNDJlZS1iYzA5LWQyZWZhNjlmNDBmZCIsInR5cCI6IkJlYXJlciIsImF6cCI6IjA2ZWRkNThiLWQzYWQtNDJlZS1iYzA5LWQyZWZhNjlmNDBmZCIsInNjb3BlIjoiRTJFLVJlbGF0aW9uc2hpcHNXaXRoRWRPcmdzT25seUNsYWltU2V0IiwiYXVkIjoiYWNjb3VudCIsImlzcyI6Imh0dHA6Ly9sb2NhbGhvc3Q6ODA4MSIsImNsaWVudF9uYW1lIjoiRm9yIGVkIG9yZ3MiLCJwZXJtaXNzaW9uIjoiRTJFLVJlbGF0aW9uc2hpcHNXaXRoRWRPcmdzT25seUNsYWltU2V0IiwiaHR0cDovL3NjaGVtYXMubWljcm9zb2Z0LmNvbS93cy8yMDA4LzA2L2lkZW50aXR5L2NsYWltcy9yb2xlIjpbImRtcy1jbGllbnQiXX0.EcMKGc8LlxoPjrioW-0GiA-FZsNP6Ah5yAzLw2cco2DLVWBeOxdWbCbFA7mNCF-tEiW54uVDHP1shWK6aMJlgU3rs1u6wBee9lH42-E_XEZtPseAuDBtPuWfWIvtkyhQSx4p-YNa5OOdwVjHoY-wj7p8Q6zK-_GE1nGXaSZWJfKxLzMFzu_bqOTYPmXj9JDWzVAvoPbfyB4CJKpL8l1BvhcECiZ0KkYXfw1lN-V9B2NfyARPjY1atNYXgRFJA4EUHWHkhh0s6uuAem8Jb-aT63rc9ft-efn8GQ7ceOdvWeeruGAXgJbQU2GxmzjtyXghzpazySRrgSYLXGTo1QL1Og

GET {{dataApi}}/ed-fi/gradeLevelDescriptors
Authorization: bearer {{expiredToken}}
Content-Type: application/json

###
POST {{dataApi}}/ed-fi/educationOrganizationCategoryDescriptors
Authorization: bearer {{edOrgToken}}
Content-Type: application/json

{
  "namespace": "uri://ed-fi.org/EducationOrganizationCategoryDescriptor",
  "codeValue": "School",
  "shortDescription": "School"
}

### Read the created object
GET {{dataApi}}/ed-fi/educationOrganizationCategoryDescriptors
Authorization: bearer {{edOrgToken}}
Content-Type: application/json


### Another useful claimset: E2E-NoFurtherAuthRequiredClaimSet
GET http://localhost:{{configPort}}/authorizationMetadata?claimSetName=E2E-NoFurtherAuthRequiredClaimSet
Authorization: bearer {{configToken}}

# What happens when you try to access a resource type that is not covered by the
# claimset? Assuming you have an otherwise valid token, you will get a 403
# Forbidden response.

###
POST {{dataApi}}/ed-fi/students
Authorization: bearer {{edOrgToken}}
Content-Type: application/json

{
    "studentUniqueId": "gw",
    "firstName": "George",
    "lastSurname": "Washington",
    "birthDate": "1982-02-22"
}
