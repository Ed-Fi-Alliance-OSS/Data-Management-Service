// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:2.0.0.0
//      Reqnroll Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EdFi.DataManagementService.Tests.E2E.Features.Resources
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "2.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Resources \"Delete\" Operation validations")]
    public partial class ResourcesDeleteOperationValidationsFeature
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "DeleteResourcesValidation.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Resources", "Resources \"Delete\" Operation validations", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 5
        #line hidden
#line 6
            await testRunner.GivenAsync("the Data Management Service must receive a token issued by \"http://localhost\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Given ");
#line hidden
#line 7
              await testRunner.AndAsync("user is already authorized", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 8
             await testRunner.WhenAsync("a POST request is made to \"/ed-fi/absenceEventCategoryDescriptors\" with", @"  {
      ""codeValue"": ""Sick Leave"",
      ""description"": ""Sick Leave"",
      ""effectiveBeginDate"": ""2024-05-14"",
      ""effectiveEndDate"": ""2024-05-14"",
      ""namespace"": ""uri://ed-fi.org/AbsenceEventCategoryDescriptor"",
      ""shortDescription"": ""Sick Leave""
  }", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 19
             await testRunner.ThenAsync("it should respond with 201 or 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify deleting a specific resource by ID")]
        public async System.Threading.Tasks.Task VerifyDeletingASpecificResourceByID()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify deleting a specific resource by ID", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 21
        this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
        await this.FeatureBackgroundAsync();
#line hidden
#line 22
             await testRunner.WhenAsync("a DELETE request is made to \"/ed-fi/absenceEventCategoryDescriptors/{id}\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 23
             await testRunner.ThenAsync("it should respond with 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify error handling when deleting using a invalid id")]
        public async System.Threading.Tasks.Task VerifyErrorHandlingWhenDeletingUsingAInvalidId()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify error handling when deleting using a invalid id", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 25
        this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
        await this.FeatureBackgroundAsync();
#line hidden
#line 26
             await testRunner.WhenAsync("a DELETE request is made to \"/ed-fi/absenceEventCategoryDescriptors/0011223344556" +
                        "6\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
             await testRunner.ThenAsync("it should respond with 404", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify error handling when deleting a non existing resource")]
        public async System.Threading.Tasks.Task VerifyErrorHandlingWhenDeletingANonExistingResource()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify error handling when deleting a non existing resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 29
        this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
        await this.FeatureBackgroundAsync();
#line hidden
#line 31
             await testRunner.WhenAsync("a DELETE request is made to \"/ed-fi/absenceEventCategoryDescriptors/{id}\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 32
             await testRunner.ThenAsync("it should respond with 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 33
             await testRunner.WhenAsync("a DELETE request is made to \"/ed-fi/absenceEventCategoryDescriptors/{id}\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 34
             await testRunner.ThenAsync("it should respond with 404", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify response code when GET a deleted resource")]
        public async System.Threading.Tasks.Task VerifyResponseCodeWhenGETADeletedResource()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify response code when GET a deleted resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 36
        this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
        await this.FeatureBackgroundAsync();
#line hidden
#line 38
             await testRunner.WhenAsync("a DELETE request is made to \"/ed-fi/absenceEventCategoryDescriptors/{id}\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 39
             await testRunner.ThenAsync("it should respond with 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 40
             await testRunner.WhenAsync("a GET request is made to \"/ed-fi/absenceEventCategoryDescriptors/{id}\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 41
             await testRunner.ThenAsync("it should respond with 404", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify response code when deleting a referenced descriptor")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public async System.Threading.Tasks.Task VerifyResponseCodeWhenDeletingAReferencedDescriptor()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify response code when deleting a referenced descriptor", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 44
        this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
        await this.FeatureBackgroundAsync();
#line hidden
#line 45
             await testRunner.WhenAsync("a POST request is made to \"/ed-fi/gradingPeriodDescriptors\" with", " {\r\n   \"codeValue\": \"First Six Weeks\",\r\n   \"description\": \"First Six Weeks\",\r\n   " +
                        "\"namespace\": \"uri://ed-fi.org/GradingPeriodDescriptor\",\r\n   \"shortDescription\": " +
                        "\"First Six Weeks\"\r\n }", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 54
             await testRunner.ThenAsync("it should respond with 201 or 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 55
             await testRunner.WhenAsync("a POST request is made for dependent resource \"/ed-fi/gradingPeriods\" with", @" {
   ""schoolReference"": {
     ""schoolId"": 255901001
   },
   ""schoolYearTypeReference"": {
     ""schoolYear"": 2022
   },
   ""gradingPeriodDescriptor"": ""uri://ed-fi.org/GradingPeriodDescriptor#First Six Weeks"",
   ""gradingPeriodName"": ""2021-2022 Fall Semester Exam 1"",
   ""beginDate"": ""2021-08-23"",
   ""endDate"": ""2021-10-03"",
   ""periodSequence"": 1,
   ""totalInstructionalDays"": 29
 }", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 72
             await testRunner.ThenAsync("it should respond with 201 or 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 73
             await testRunner.WhenAsync("a DELETE request is made to \"/ed-fi/gradingPeriodDescriptors/{id}\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 74
             await testRunner.ThenAsync("it should respond with 409", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Verify response code when deleting a referenced resource")]
        [NUnit.Framework.IgnoreAttribute("Ignored scenario")]
        public async System.Threading.Tasks.Task VerifyResponseCodeWhenDeletingAReferencedResource()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Verify response code when deleting a referenced resource", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 77
       this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 5
        await this.FeatureBackgroundAsync();
#line hidden
#line 78
             await testRunner.WhenAsync("a POST request is made to \"/ed-fi/schools\" with", @"  {
    ""schoolId"": 255901001,
    ""nameOfInstitution"": ""testschool"",
     ""educationOrganizationCategories"": [
       {
         ""educationOrganizationCategoryDescriptor"": ""uri://ed-fi.org/EducationOrganizationCategoryDescriptor#Other""
       }
     ],
     ""schoolCategories"": [
       {
         ""schoolCategoryDescriptor"": ""uri://ed-fi.org/SchoolCategoryDescriptor#All Levels""
       }
     ],
     ""gradeLevels"": [
       {
         ""gradeLevelDescriptor"": ""uri://ed-fi.org/GradeLevelDescriptor#First Grade""
       }
     ]
  }", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 100
             await testRunner.ThenAsync("it should respond with 201 or 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 101
             await testRunner.WhenAsync("a POST request is made to \"ed-fi/academicWeeks\" with", " {\r\n  \"weekIdentifier\": \"abcdef\",\r\n  \"schoolReference\": {\r\n      \"schoolId\": 2559" +
                        "01001 },\r\n  \"beginDate\": \"2024-04-04\",\r\n  \"endDate\": \"2024-04-04\",\r\n  \"totalInst" +
                        "ructionalDays\": 300\r\n }", ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 112
             await testRunner.ThenAsync("it should respond with 201 or 200", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 113
             await testRunner.WhenAsync("a DELETE request is made to \"/ed-fi/schools/{id}\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 114
             await testRunner.ThenAsync("it should respond with 409", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
