// SPDX-License-Identifier: Apache-2.0
// Licensed to the Ed-Fi Alliance under one or more agreements.
// The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
// See the LICENSE and NOTICES files in the project root for more information.

using System.Text.Json.Serialization;

namespace EdFi.DataManagementService.Api.Core.Exceptions;

public record FailureResponse()
{
    private const string BaseTypePrefix = "urn:dms";
    private const string BadRequestTypePrefix = $"{BaseTypePrefix}:bad-request";
    private const string DataValidationTypePrefix = $"{BadRequestTypePrefix}:data";

    /// <summary>
    /// A human-readable explanation specific to this occurrence of the problem.
    /// </summary>
    [JsonPropertyName("detail")]
    public string? Detail { get; }

    /// <summary>
    /// A URI reference [RFC3986] that identifies the problem type. This specification encourages that, when
    /// dereferenced, it provide human-readable documentation for the problem type
    /// (e.g., using HTML [W3C.REC-html5-20141028]).  When this member is not present, its value is assumed to be
    /// "about:blank".
    /// </summary>
    [JsonPropertyName("type")]
    public string? Type { get; }

    /// <summary>
    /// A short, human-readable summary of the problem type.It SHOULD NOT change from occurrence to occurrence
    /// of the problem, except for purposes of localization(e.g., using proactive content negotiation;
    /// see[RFC7231], Section 3.4).
    /// </summary>
    [JsonPropertyName("title")]
    public string? Title { get; }

    /// <summary>
    /// The HTTP status code([RFC7231], Section 6) generated by the origin server for this occurrence of the problem.
    /// </summary>
    [JsonPropertyName("status")]
    public int Status { get; }

    /// <summary>
    /// Gets or sets a correlation id that is logged with the details of the exception.
    /// </summary>
    [JsonPropertyName("correlationId")]
    public string? CorrelationId { get; }

    /// <summary>
    /// Contains arrays of validation errors keyed by JSON Path (intended for use by a domain expert).
    /// </summary>
    [JsonPropertyName("validationErrors")]
    public Dictionary<string, string[]>? ValidationErrors { get; }

    /// <summary>
    /// Contains an array of error messages encountered while processing the request (intended for use by a technical audience).
    /// </summary>
    [JsonPropertyName("errors")]
    public string[]? Errors { get; }

    public FailureResponse(string? Detail, string? Type, string? Title, int Status, string? CorrelationId,
    Dictionary<string, string[]>? ValidationErrors, string[]? Errors) : this()
    {
        this.Detail = Detail;
        this.Type = Type;
        this.Title = Title;
        this.Status = Status;
        this.CorrelationId = CorrelationId;
        this.ValidationErrors = ValidationErrors;
        this.Errors = Errors;
    }

    public static FailureResponse DataValidationError(string? detail,
        Dictionary<string, string[]>? ValidationErrors, string[]? Errors) =>
         new(detail, DataValidationTypePrefix, "Data Validation Error", StatusCodes.Status400BadRequest, null,
            ValidationErrors: ValidationErrors, Errors: Errors);

    public static FailureResponse BadRequestError(string? detail,
    Dictionary<string, string[]>? ValidationErrors, string[]? Errors) =>
     new(detail, BadRequestTypePrefix, "Bad Request", StatusCodes.Status400BadRequest, null,
        ValidationErrors: ValidationErrors, Errors: Errors);
}
