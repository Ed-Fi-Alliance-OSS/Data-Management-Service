// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace EdFi.DataManagementService.Api.Tests.E2E.Features.Properties
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("ValidationErrors")]
    public partial class ValidationErrorsFeature
    {
        
        private Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Properties.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features/Properties", "ValidationErrors", "    POST a request that has an invalid payload.", ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate extra properties are being removed on POST")]
        [NUnit.Framework.CategoryAttribute("properties")]
        public async System.Threading.Tasks.Task ValidateExtraPropertiesAreBeingRemovedOnPOST()
        {
            string[] tagsOfScenario = new string[] {
                    "properties"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Validate extra properties are being removed on POST", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 5
        this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 6
             await testRunner.WhenAsync("a POST request is made to \"ed-fi/academicWeeks\" with", @"{
""weekIdentifier"": ""LastWeek"",
""schoolReference"": {
""schoolId"": 255901001,
""link"": {
""rel"": ""School"",
""href"": ""/ed-fi/schools/20ec19e5070245128a30fdcc6925bb09""
}
},
""beginDate"": ""2024-05-30"",
""endDate"": ""2024-05-30"",
""totalInstructionalDays"": 0,
""_etag"": ""5250168731208835753"",
""_lastModifiedDate"": ""2024-05-30T22:30:57.509Z""
}", ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 24
             await testRunner.ThenAsync("it should respond with 201", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 25
              await testRunner.AndAsync("the response headers includes", "  {\n      \"location\": \"/ed-fi/academicWeeks/{id}\"\n  }", ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 31
              await testRunner.AndAsync("the record can be retrieved with a GET request", "{\n  \"weekIdentifier\": \"LastWeek\",\n  \"schoolReference\": {\n    \"schoolId\": 25590100" +
                        "1\n  },\n  \"beginDate\": \"2024-05-30\",\n  \"endDate\": \"2024-05-30\",\n  \"totalInstructi" +
                        "onalDays\": 0\n}", ((Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate extra properties are being removed on PUT")]
        [NUnit.Framework.CategoryAttribute("properties")]
        public async System.Threading.Tasks.Task ValidateExtraPropertiesAreBeingRemovedOnPUT()
        {
            string[] tagsOfScenario = new string[] {
                    "properties"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("Validate extra properties are being removed on PUT", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 45
        this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 46
             await testRunner.WhenAsync("a PUT request is made to \"ed-fi/academicWeeks/{id}\" with", @"{
""id"": ""{id}"",
""weekIdentifier"": ""LastWeek"",
""schoolReference"": {
""schoolId"": 255901001,
""link"": {
""rel"": ""School"",
""href"": ""/ed-fi/schools/20ec19e5070245128a30fdcc6925bb09""
}
},
""beginDate"": ""2024-05-30"",
""endDate"": ""2024-06-30"",
""totalInstructionalDays"": 0,
""_etag"": ""5250168731208835753"",
""_lastModifiedDate"": ""2024-05-30T22:30:57.509Z""
}", ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 65
             await testRunner.ThenAsync("it should respond with 204", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
#line 66
              await testRunner.AndAsync("the response headers includes", "  {\n      \"location\": \"/ed-fi/academicWeeks/{id}\"\n  }", ((Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
