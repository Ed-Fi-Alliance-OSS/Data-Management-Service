# SPDX-License-Identifier: Apache-2.0
# Licensed to the Ed-Fi Alliance under one or more agreements.
# The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
# See the LICENSE and NOTICES files in the project root for more information.

name: Pkg EdFi.Dms.Populated.Template.PostgreSQL
on:
  release:
    types:
      - released
  workflow_dispatch:

env:
  STANDARD_REFERENCE: "v5.2.0"
  PACKAGE_NAME: "EdFi.Dms.Populated.Template.PostgreSQL.5.2.0"
  MANIFEST_FILE: "_manifest/spdx_2.2/manifest.spdx.json"
  PROVENANCE_FILE: "populated.template.intoto.jsonl"
  ARTIFACTS_FEED_URL: ${{ vars.AZURE_ARTIFACTS_FEED_URL }}
  ARTIFACTS_PACKAGES_URL: ${{ vars.ARTIFACTS_PACKAGES_URL }}
  ARTIFACTS_USERNAME: ${{ secrets.AZURE_ARTIFACTS_USER_NAME }}
  ARTIFACTS_API_KEY: ${{ secrets.AZURE_ARTIFACTS_PERSONAL_ACCESS_TOKEN }}
  VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '{"endpointCredentials": [{"endpoint": "https://pkgs.dev.azure.com/ed-fi-alliance/Ed-Fi-Alliance-OSS/_packaging/EdFi/nuget/v3/index.json","password": "${{ secrets.AZURE_ARTIFACTS_PERSONAL_ACCESS_TOKEN }}"}]}'

permissions: read-all

jobs:
  build-template:
    name: Build Populated Template Package
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    outputs:
      hash-code: ${{ steps.hash-code.outputs.hash-code }}
      dms-version: ${{ steps.versions.outputs.dms-v }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Checkout Ed-Fi-Data-Standard
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
            repository: Ed-Fi-Alliance-OSS/Ed-Fi-Data-Standard
            path: Ed-Fi-Data-Standard/
            ref: ${{ env.STANDARD_REFERENCE }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Cache Docker layers
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 #v4.2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('src/Directory.Packages.props', 'src/dms/Dockerfile', 'src/dms/**') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build DMS Docker image
        uses: docker/build-push-action@b32b51a8eda65d6793cd0494a773d4f6bcef32dc # v6.11.0
        with:
          load: true
          context: ./src/dms
          file: ./src/dms/Dockerfile
          build-contexts: |
            parentdir=./src
          push: false
          tags: dms-local-dms:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Set Version Numbers
        id: versions
        run: |
          Import-Module ./package-helpers.psm1
          Get-VersionNumber -projectPrefix "dms" # Match the DMS version

      - name: Start DMS Docker
        run: |
          $env:USE_API_SCHEMA_PATH="false"
          ./start-local-dms.ps1 -EnvironmentFile "./.env.e2e" -SearchEngine "OpenSearch" -enableConfig
        working-directory: eng/docker-compose/

      - name: Generate Populated Template package
        run: |
          Import-Module ./Template-Management.psm1 -Force

          $packageVersion = "${{ steps.versions.outputs.dms-semver }}" -replace "dms-v", ""
          Build-Template `
                  -TemplateType Populated `
                  -DmsUrl 'http://localhost:8080' `
                  -CmsUrl 'http://localhost:8081' `
                  -MinimalSampleDataDirectory '${{ github.workspace }}/Ed-Fi-Data-Standard/Descriptors' `
                  -PopulatedSampleDataDirectory '${{ github.workspace }}/Ed-Fi-Data-Standard/Samples/Sample XML' `
                  -Extension 'ed-fi'`
                  -ConfigFilePath './PopulatedTemplateSettings.psd1' `
                  -StandardVersion '${{ env.STANDARD_VERSION }}'`
                  -PackageVersion $packageVersion
        working-directory: eng/DatabaseTemplates/

      - name: Upload Bulk Load Logs
        if: failure()
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5
        with:
          name: Bulkload-logs
          path: ${{ github.workspace }}/eng/DatabaseTemplates/.packages/**/logfile.txt
          retention-days: 10

      - name: Export Docker Logs
        if: failure()
        run: |
          $logDir = "${{ github.workspace }}/logs"
          New-Item -ItemType Directory -Path $logDir -Force | Out-Null

          docker ps --format "{{.Names}}" | ForEach-Object {
              $container = $_
              $logPath = Join-Path $logDir "$container.log"
              docker logs $container > $logPath
          }
        shell: pwsh

      - name: Upload Docker Logs
        if: failure()
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5
        with:
          name: Docker-Logs
          path: ${{ github.workspace }}/logs
          retention-days: 10

      - name: Generate hash for NuGet package
        id: hash-code
        run: |
          "hash-code=$(sha256sum *.nupkg | base64 -w0)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        working-directory: eng/DatabaseTemplates/

      - name: Upload Populated Template Package as Artifact
        if: success()
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        with:
          name: "${{ env.PACKAGE_NAME }}-NuGet"
          path: ${{ github.workspace }}/eng/DatabaseTemplates/*.nupkg
          if-no-files-found: error
          retention-days: 30

  generate-package-sbom:
    name: Create Populated Template SBOM
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    needs: build-template
    permissions:
      actions: read
      contents: write
    outputs:
      sbom-hash-code: ${{ steps.sbom-hash-code.outputs.sbom-hash-code }}
    steps:
      - name: Get Populated Template Package Artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #v4.1.8
        with:
          name: ${{ env.PACKAGE_NAME }}-NuGet

      - name: Generate Populated Template Software Bill of Materials (SBOM)
        run: |
          $packageName = "${{ env.PACKAGE_NAME }}"
          $version = "${{ needs.build-template.outputs.dms-version }}"

          Get-ChildItem -Include "$packageName.*.nupkg" -Recurse | ForEach-Object { $_.FullName } > buildfilelist.txt

          dotnet tool install --global Microsoft.Sbom.DotNetTool

          sbom-tool generate `
              -b ./ `
              -bl ./buildfilelist.txt `
              -bc "./" `
              -pn "$packageName" `
              -pv $version `
              -nsb https://ed-fi.org `
              -m ./ `
              -ps "Ed-Fi Alliance"

          cp _manifest/spdx_2.2/manifest.spdx.* .

      - name: Upload Populated Template SBOM
        if: success()
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        with:
          name: ${{ env.PACKAGE_NAME }}-SBOM
          path: ${{ env.MANIFEST_FILE }}
          if-no-files-found: error
          retention-days: 30

      - name: Generate Populated Template SBOM Hash Code
        id: sbom-hash-code
        shell: bash
        run: |
          # sha256sum returns "<hashcode>  <name of file". Split that and return only the <hashcode>.
          sbom_hash=$(sha256sum ./${{ env.MANIFEST_FILE }} | awk '{split($0,a); print a[1]}')
          echo "sbom-hash-code=$sbom_hash" >> $GITHUB_OUTPUT

  generate-package-provenance:
    name: Create DMS Provenance
    needs: build-template
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: Ed-Fi-Alliance-OSS/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: ${{ needs.build-template.outputs.hash-code }}
      provenance-name: populated.template.intoto.jsonl # env.PROVENANCE_FILE cannot be used in this context
      upload-assets: true
      # TODO: remove this after this issue is resolved: https://github.com/slsa-framework/slsa-github-generator/issues/876
      compile-generator: true

  publish-template-package:
    name: Publish Populated Template Package
    needs:
      - build-template
      - generate-package-sbom
      - generate-package-provenance
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout the repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Get Populated Template Package Artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #v4.1.8
        with:
          name: ${{ env.PACKAGE_NAME }}-NuGet

      - name: Install-credential-handler
        run: |
            Import-Module ./package-helpers.psm1
            InstallCredentialHandler

      - name: Push Populated Template Package to Azure
        run: |
         $artifact = (Get-ChildItem -Path $_ -Name -Include *.nupkg)
         $arguments = @{
           EdFiNuGetFeed = "${{ env.ARTIFACTS_FEED_URL }}"
           NuGetApiKey = "${{ env.ARTIFACTS_API_KEY }}"
         }

         $artifact | ForEach-Object {
             $arguments.PackageFile = $_
             ./build-dms.ps1 Push @arguments
          }

      - name: Promote Populated Template Azure Package
        if: ${{ github.event_name == 'release' }}
        run: |
          $arguments = @{
            PackagesURL = "${{ env.ARTIFACTS_PACKAGES_URL }}"
            Username    = "${{ env.ARTIFACTS_USERNAME }}"
            ViewId      = "release"
            ReleaseRef  = "${{ github.ref_name }}"
            Password    = (ConvertTo-SecureString -String "${{ env.ARTIFACTS_API_KEY }}" -AsPlainText -Force)
            PackageName = "${{ env.PACKAGE_NAME}}"
          }

          Import-Module ./package-helpers.psm1
          Invoke-Promote @arguments

  attach-sbom-and-provenance-to-release:
    name: Attach Populated Template SBOM and Provenance to GitHub Release
    runs-on: ubuntu-latest
    needs:
      - generate-package-sbom
      - generate-package-provenance
    if: ${{ github.event_name == 'release' }}
    permissions:
      contents: write
    steps:
      - name: Download SBOM Artifact
        uses: Ed-Fi-Alliance-OSS/slsa-github-generator/.github/actions/secure-download-artifact@v2.0.0
        with:
          name: "${{ env.PACKAGE_NAME }}-SBOM"
          path: ${{ env.MANIFEST_FILE }}
          sha256: "${{ needs.generate-package-sbom.outputs.sbom-hash-code }}"

      - name: Download Provenance Artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #v4.1.8
        with:
          name: ${{ env.PROVENANCE_FILE }}

      - name: Attach SBOM to Release
        shell: pwsh
        run: |
          $release = "${{ github.ref_name }}"
          $repo = "${{ github.repository }}"
          $token = "${{ secrets.GITHUB_TOKEN }}"
          $file = "${{ env.MANIFEST_FILE }}"
          $uploadName = "${{ env.PACKAGE_NAME }}-SBOM.zip"

          $url = "https://api.github.com/repos/$repo/releases/tags/$release"
          $gh_headers = @{
              "Accept"        = "application/vnd.github+json"
              "Authorization" = "Bearer $token"
          }
          $response = Invoke-RestMethod -Uri $url -Headers $gh_headers
          $releaseId = $response.id

          Compress-Archive $file -DestinationPath $uploadName
          $url = "https://uploads.github.com/repos/$repo/releases/$releaseId/assets"
          $gh_headers["Content-Type"] = "application/octet"
          Invoke-RestMethod -Method POST `
              -Uri "$($url)?name=$($uploadName)" `
              -Headers $gh_headers `
              -InFile $uploadName

      - name: Attach Provenance to Release
        shell: pwsh
        run: |
          $release = "${{ github.ref_name }}"
          $repo = "${{ github.repository }}"
          $token = "${{ secrets.GITHUB_TOKEN }}"
          $file = "${{ env.PROVENANCE_FILE }}"
          $uploadName = "${{ env.PROVENANCE_FILE }}"

          $url = "https://api.github.com/repos/$repo/releases/tags/$release"
          $gh_headers = @{
              "Accept"        = "application/vnd.github+json"
              "Authorization" = "Bearer $token"
          }
          $response = Invoke-RestMethod -Uri $url -Headers $gh_headers
          $releaseId = $response.id
          $url = "https://uploads.github.com/repos/$repo/releases/$releaseId/assets"
          $gh_headers["Content-Type"] = "application/octet"
          Invoke-RestMethod -Method POST `
              -Uri "$($url)?name=$($uploadName)" `
              -Headers $gh_headers `
              -InFile $file
