# SPDX-License-Identifier: Apache-2.0
# Licensed to the Ed-Fi Alliance under one or more agreements.
# The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
# See the LICENSE and NOTICES files in the project root for more information.

name: Scheduled Build

on:
  workflow_dispatch:
  schedule:
  - cron: '0 8 * * 6' # Scheduled the job to run every Saturday at 8 AM UTC

permissions: read-all

env:
  CONFIGURATION: "Release"

jobs:
  build-and-test:
    name: Build and Run Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout the repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Cache Docker layers
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 #v4.2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('src/Directory.Packages.props', 'src/dms/Dockerfile', 'src/dms/**') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build DMS Docker image
        uses: docker/build-push-action@b32b51a8eda65d6793cd0494a773d4f6bcef32dc # v6.11.0
        with:
          load: true
          context: ./src/dms
          file: ./src/dms/Dockerfile
          build-contexts: |
            parentdir=./src
          push: false
          tags: dms-local-dms:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Setup dotnet
        uses: actions/setup-dotnet@87b7050bc53ea08284295505d98d2aa94301e852 # v4.2
        with:
          dotnet-version: '8.0.x'

      - name: Cache Nuget packages
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Packages.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: DMS Build
        id: build_step
        run: ./build-dms.ps1 Build -Configuration ${{ env.CONFIGURATION }}

      - name: Install Coverlet Reference
        if: success()
        run: |
          dotnet tool install --global coverlet.console
          dotnet tool install --global dotnet-reportgenerator-globaltool

      - name: Run DMS Unit Tests
        id: unit_test_step
        run: ./build-dms.ps1 UnitTest -Configuration ${{ env.CONFIGURATION }}

      - name: Run ElasticSearch End to End Tests
        if: success()
        run: ./build-dms.ps1 E2ETest -EnableElasticSearch -Configuration ${{ env.CONFIGURATION }} -SkipDockerBuild

      - name: Run OpenSearch End to End Tests
        if: success()
        run: ./build-dms.ps1 E2ETest -EnableOpenSearch -Configuration ${{ env.CONFIGURATION }} -SkipDockerBuild

  build-and-start-dms:
    name: Build and Start DMS, Download OpenAPI Specs
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout the repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Cache Nuget packages
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 #v4.2
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/Directory.Packages.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Cache Docker layers
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 #v4.2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('src/Directory.Packages.props', 'src/dms/Dockerfile', 'src/dms/**') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build DMS Docker image
        uses: docker/build-push-action@b32b51a8eda65d6793cd0494a773d4f6bcef32dc # v6.11.0
        with:
          load: true
          context: ./src/dms
          file: ./src/dms/Dockerfile
          build-contexts: |
            parentdir=./src
          push: false
          tags: dms-local-dms:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Setup dotnet
        uses: actions/setup-dotnet@87b7050bc53ea08284295505d98d2aa94301e852 # v4.2
        with:
          dotnet-version: '8.0.x'

      - name: Build
        run: ./build-dms.ps1 Build -Configuration ${{ env.CONFIGURATION }}

      - name: Start DMS Docker
        run: |
          ./start-local-dms.ps1 -EnvironmentFile "./.env.e2e" -EnableConfig -r
        working-directory: eng/docker-compose/

      - name: Download OpenAPI specs
        run: |
          mkdir specs
          Invoke-WebRequest -Uri "http://localhost:8080/metadata/specifications/resources-spec.json" -OutFile "specs/resources-spec.json"
          Invoke-WebRequest -Uri "http://localhost:8080/metadata/specifications/descriptors-spec.json" -OutFile "specs/descriptors-spec.json"
          Invoke-WebRequest -Uri "http://localhost:8080/metadata/specifications/discovery-spec.json" -OutFile "specs/discovery-spec.json"

      - name: Upload Resources Spec
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5
        with:
          name: resources-spec
          path: specs/resources-spec.json

      - name: Upload Descriptors Spec
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5
        with:
          name: descriptors-spec
          path: specs/descriptors-spec.json

      - name: Upload Discovery Spec
        uses: actions/upload-artifact@6f51ac03b9356f520e9adb1b1b7802705f340c2b # v4.5
        with:
          name: discovery-spec
          path: specs/discovery-spec.json

  validate-resources-spec:
    name: Validate Resources Spec
    runs-on: ubuntu-latest
    needs: build-and-start-dms
    steps:
      - name: Download Resources Spec from artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #v4.1.8
        with:
          name: resources-spec
          path: specs

      - name: Validate Resources Spec downloaded
        uses: swaggerexpert/swagger-editor-validate@54b85e2f5c1fcdee85308dd57cad8c8ec19d3970
        with:
          definition-file: specs/resources-spec.json
          default-timeout: 30000 # 30 seconds

  validate-descriptors-spec:
    name: Validate Descriptors Spec
    runs-on: ubuntu-latest
    needs: build-and-start-dms
    steps:
      - name: Download Descriptors Spec from artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #v4.1.8
        with:
          name: descriptors-spec
          path: specs

      - name: Validate Descriptors Spec downloaded
        uses: swaggerexpert/swagger-editor-validate@54b85e2f5c1fcdee85308dd57cad8c8ec19d3970
        with:
          definition-file: specs/descriptors-spec.json
          default-timeout: 30000 # 30 seconds

  validate-discovery-spec:
    name: Validate Discovery Spec
    runs-on: ubuntu-latest
    needs: build-and-start-dms
    steps:
      - name: Download Discovery Spec from artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #v4.1.8
        with:
          name: discovery-spec
          path: specs

      - name: Validate Discovery Spec downloaded
        uses: swaggerexpert/swagger-editor-validate@54b85e2f5c1fcdee85308dd57cad8c8ec19d3970
        with:
          definition-file: specs/discovery-spec.json
          default-timeout: 30000 # 30 seconds

  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [build-and-test, validate-resources-spec, validate-descriptors-spec, validate-discovery-spec]
    if: always()
    steps:
      - name: Notify Slack on success
        if: needs.build-and-test.result == 'success' && needs.validate-resources-spec.result == 'success' && needs.validate-descriptors-spec.result == 'success' && needs.validate-discovery-spec.result == 'success'
        uses: slackapi/slack-github-action@485a9d42d3a73031f12ec201c457e2162c45d02d #v2.0.0
        with:
          payload: '{"text":"✅ Build and tests passed for the scheduled run!"}'
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook

      - name: Notify Slack on failure
        if: needs.build-and-test.result == 'failure' || needs.validate-resources-spec.result == 'failure' || needs.validate-descriptors-spec.result == 'failure' || needs.validate-discovery-spec.result == 'failure'
        uses: slackapi/slack-github-action@485a9d42d3a73031f12ec201c457e2162c45d02d #v2.0.0
        with:
          payload: |
            {
              "text": "❌ GitHub Action build result: ${{ job.status }}\n${{ github.event.head_commit.url }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "❌ GitHub Action build result: ${{ job.status }}\n*Repository:* ${{ github.repository }}\n*Branch:* ${{ github.ref }}\n*Commit Message:* ${{ github.event.head_commit.message || 'No commit message available' }}\n*Log URL:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
