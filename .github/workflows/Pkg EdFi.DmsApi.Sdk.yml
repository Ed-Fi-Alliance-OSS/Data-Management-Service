# SPDX-License-Identifier: Apache-2.0
# Licensed to the Ed-Fi Alliance under one or more agreements.
# The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
# See the LICENSE and NOTICES files in the project root for more information.

name: Pkg EdFi.DmsApi.Sdk
on:
  release:
    types:
      - prereleased
  workflow_dispatch:
env:
  SDK_PACKAGE_NAME: "EdFi.DmsApi.Sdk.Standard.5.2.0"
  MANIFEST_FILE: "_manifest/spdx_2.2/manifest.spdx.json"
  ARTIFACTS_FEED_URL: "https://pkgs.dev.azure.com/ed-fi-alliance/Ed-Fi-Alliance-OSS/_packaging/EdFi/nuget/v3/index.json"
  ARTIFACTS_API_KEY: ${{ secrets.AZURE_ARTIFACTS_PERSONAL_ACCESS_TOKEN }}
  VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '{"endpointCredentials": [{"endpoint": "https://pkgs.dev.azure.com/ed-fi-alliance/Ed-Fi-Alliance-OSS/_packaging/EdFi/nuget/v3/index.json","password": "${{ secrets.AZURE_ARTIFACTS_PERSONAL_ACCESS_TOKEN }}"}]}'

permissions: read-all

jobs:
  build-pack-dms-sdk:
    name: Build And Pack DMS Core SDK
    if: startsWith(github.event.release.tag_name, 'dms-')
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    outputs:
      hash-code: ${{ steps.hash-code.outputs.hash-code }}
      dms-version: ${{ steps.versions.outputs.dms-v }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5 # v3.8.0

      - name: Cache Docker layers
        uses: actions/cache@1bd1e32a3bdc45362d1e726936510720a7c30a57 #v4.2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ hashFiles('src/Directory.Packages.props', 'src/dms/Dockerfile', 'src/dms/**') }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build DMS Docker image
        uses: docker/build-push-action@b32b51a8eda65d6793cd0494a773d4f6bcef32dc # v6.11.0
        with:
          load: true
          context: ./src/dms
          file: ./src/dms/Dockerfile
          build-contexts: |
            parentdir=./src
          push: false
          tags: dms-local-dms:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Set SDK Version Numbers
        id: versions
        run: |
          Import-Module ./package-helpers.psm1
          Get-VersionNumber -projectPrefix "dms" # Match the DMS version

      - name: Start DMS Docker
        run: |
          ./start-local-dms.ps1 -EnvironmentFile "./.env.e2e" -SearchEngine "OpenSearch"
        working-directory: eng/docker-compose/

      - name: Generate Core SDK
        run: |
          ./build-sdk.ps1 BuildAndGenerateSdk -PackageName "EdFi.DmsApi.Sdk"

      - name: Package Core SDK
        run: |
          $packageVersion = "${{ steps.versions.outputs.dms-semver }}" -replace "dms-v", ""

          ./build-sdk.ps1 Package -SDKVersion $packageVersion  -PackageName "EdFi.DmsApi.Sdk"

      - name: Generate SDK hash for NuGet package
        id: hash-code
        run: |
          "hash-code=$(sha256sum *.nupkg | base64 -w0)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload Core SDK Packages as Artifacts
        if: success()
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        with:
          name: "${{ env.SDK_PACKAGE_NAME }}-NuGet"
          path: ${{ github.workspace }}/*.nupkg
          if-no-files-found: error
          retention-days: 30

  sbom-create-dms-sdk:
    name: Create DMS SDK SBOM
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    needs: build-pack-dms-sdk
    permissions:
      actions: read
      contents: write
    outputs:
      sbom-hash-code: ${{ steps.sbom-hash-code.outputs.sbom-hash-code }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Get DMS SDK Artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #v4.1.8
        with:
          name: ${{ env.SDK_PACKAGE_NAME }}-NuGet

      - name: Generate DMS Software Bill of Materials (SBOM)
        run: |
          $packageName = "${{ env.SDK_PACKAGE_NAME }}"
          $version = "${{ needs.build-pack-dms-sdk.outputs.dms-version }}"

          Get-ChildItem -Include "$packageName.*.nupkg" -Recurse | ForEach-Object { $_.FullName } > buildfilelist.txt

          dotnet tool install --global Microsoft.Sbom.DotNetTool

          sbom-tool generate `
              -b ./ `
              -bl ./buildfilelist.txt `
              -bc "./" `
              -pn "$packageName" `
              -pv $version `
              -nsb https://ed-fi.org `
              -m ./ `
              -ps "Ed-Fi Alliance"

          cp _manifest/spdx_2.2/manifest.spdx.* .

      - name: Upload DMS SDK SBOM
        if: success()
        uses: actions/upload-artifact@26f96dfa697d77e81fd5907df203aa23a56210a8 # v4.3.0
        with:
          name: ${{ env.SDK_PACKAGE_NAME }}-SBOM
          path: ${{ env.MANIFEST_FILE }}
          if-no-files-found: error
          retention-days: 30

      - name: Generate DMS hash code for SBOM
        id: sbom-hash-code
        shell: bash
        run: |
          # sha256sum returns "<hashcode>  <name of file". Split that and return only the <hashcode>.
          sbom_hash=$(sha256sum ./${{ env.MANIFEST_FILE }} | awk '{split($0,a); print a[1]}')
          echo "sbom-hash-code=$sbom_hash" >> $GITHUB_OUTPUT

  sbom-attach-dms-sdk:
    name: Attach DMS SDK SBOM file
    runs-on: ubuntu-latest
    needs:
      - sbom-create-dms-sdk
      - build-pack-dms-sdk
    permissions:
      actions: read
      contents: write
    steps:
      - name: Download DMS SDK SBOM
        uses: Ed-Fi-Alliance-OSS/slsa-github-generator/.github/actions/secure-download-artifact@v2.0.0
        with:
          name: "${{ env.SDK_PACKAGE_NAME }}-SBOM"
          path: ${{ env.MANIFEST_FILE }}
          sha256: "${{ needs.sbom-create-dms-sdk.outputs.sbom-hash-code }}"

      - name: Attach DMS SDK to release
        shell: pwsh
        run: |
          $release = "${{ github.ref_name }}"
          $repo = "${{ github.repository }}"
          $token = "${{ secrets.GITHUB_TOKEN }}"
          $file = "${{ env.MANIFEST_FILE }}"
          $uploadName = "${{ env.SDK_PACKAGE_NAME }}-SBOM.zip"

          $url = "https://api.github.com/repos/$repo/releases/tags/$release"

          $gh_headers = @{
              "Accept"        = "application/vnd.github+json"
              "Authorization" = "Bearer $token"
          }

          $response = Invoke-RestMethod -Uri $url -Headers $gh_headers
          $releaseId = $response.id

          $url = "https://uploads.github.com/repos/$repo/releases/$releaseId/assets"

          Compress-Archive $file -DestinationPath $uploadName

          $gh_headers["Content-Type"] = "application/octet"
          Invoke-RestMethod -Method POST `
              -Uri "$($url)?name=$($uploadName)" `
              -Headers $gh_headers `
              -InFile $uploadName

  provenance-create-dms-sdk:
    name: Create DMS SDK Provenance
    needs: build-pack-dms-sdk
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: Ed-Fi-Alliance-OSS/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: ${{ needs.build-pack-dms-sdk.outputs.hash-code }}
      provenance-name: dmsApi.intoto.jsonl
      upload-assets: true
      # TODO: remove this after this issue is resolved: https://github.com/slsa-framework/slsa-github-generator/issues/876
      compile-generator: true

  publish-package-sdk:
    name: Publish Core SDK NuGet Package
    needs: build-pack-dms-sdk
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
    steps:
      - name: Checkout the repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Get DMS SDK Artifact
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 #v4.1.8
        with:
          name: ${{ env.SDK_PACKAGE_NAME }}-NuGet

      - name: Install-credential-handler DMS
        run: iex "& { $(irm https://aka.ms/install-artifacts-credprovider.ps1) } -AddNetfx"

      - name: Push DMS SDK Package to Azure Artifacts
        run: |
         $artifact = (Get-ChildItem -Path $_ -Name -Include *.nupkg)
         $arguments = @{
           EdFiNuGetFeed = "${{ env.ARTIFACTS_FEED_URL }}"
           NuGetApiKey = "${{ env.ARTIFACTS_API_KEY }}"
         }

         $artifact | ForEach-Object {
             $arguments.PackageFile = $_
             ./build-sdk.ps1 Push @arguments
          }
