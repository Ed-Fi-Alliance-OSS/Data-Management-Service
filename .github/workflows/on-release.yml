# SPDX-License-Identifier: Apache-2.0
# Licensed to the Ed-Fi Alliance under one or more agreements.
# The Ed-Fi Alliance licenses this file to you under the Apache License, Version 2.0.
# See the LICENSE and NOTICES files in the project root for more information.

name: On Release
on:
  release:
    types:
      - released
  workflow_dispatch:

env:
  ARTIFACTS_API_KEY: ${{ secrets.AZURE_ARTIFACTS_PERSONAL_ACCESS_TOKEN }}
  ARTIFACTS_FEED_URL: ${{ vars.AZURE_ARTIFACTS_FEED_URL }}
  ARTIFACTS_PACKAGES_URL: ${{ vars.ARTIFACTS_PACKAGES_URL }}
  ARTIFACTS_USERNAME: ${{ secrets.AZURE_ARTIFACTS_USER_NAME }}

permissions: read-all

jobs:
  delete-pre-releases:
    name: Delete Unnecessary Pre-Releases
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout the repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Delete other pre-releases and their tags
        shell: pwsh
        run: |
          $release = "${{ github.ref_name }}"
          $repo = "${{ github.repository }}"
          $token = "${{ secrets.GITHUB_TOKEN }}"

          $page = 1
          $release_list = @()

          Do {

            $url = "https://api.github.com/repos/$repo/releases?per_page=100&page=$page"
            $gh_headers = @{
                "Accept"        = "application/vnd.github+json"
                "Authorization" = "Bearer $token"
            }

            $release_list = Invoke-RestMethod $url -Headers $gh_headers

            $release_list | ForEach-Object {
                if ($_.tag_name -like "*-pre-*-alpha*" -and $_.prerelease) {
                    "Deleting pre-release $($_.tag_name)" | Write-Output
                    Invoke-RestMethod -Method Delete -Uri $_.url -Headers $gh_headers
                }
            }

            $page += 1
          } While ($release_list.count -gt 0)

  promote-azure-artifact:
    name: Promote Azure Artifact
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repo
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Promote DataManagementService Package
        shell: pwsh
        run: |
          $arguments = @{
            PackagesURL = "${{ env.ARTIFACTS_PACKAGES_URL }}"
            Username    = "${{ env.ARTIFACTS_USERNAME }}"
            ViewId        = "release"
            ReleaseRef  = "${{ github.ref_name }}"
            Password    = (ConvertTo-SecureString -String "${{ env.ARTIFACTS_API_KEY }}" -AsPlainText -Force)
            PackageName = "EdFi.DataManagementService"
          }

          Import-Module ./package-helpers.psm1
          Invoke-Promote @arguments

      - name: Promote DmsConfigurationService Package
        shell: pwsh
        run: |
          $arguments = @{
            PackagesURL = "${{ env.ARTIFACTS_PACKAGES_URL }}"
            Username    = "${{ env.ARTIFACTS_USERNAME }}"
            ViewId      = "release"
            ReleaseRef  = "${{ github.ref_name }}"
            Password    = (ConvertTo-SecureString -String "${{ env.ARTIFACTS_API_KEY }}" -AsPlainText -Force)
            PackageName = "EdFi.DmsConfigurationService"
          }

          Import-Module ./package-helpers.psm1
          Invoke-Promote @arguments

  tag-dms-image:
    name: Release Tag DMS Image
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Release Tags
        id: prepare-tags
        run: |
          IMAGE_NAME="${{ vars.IMAGE_NAME }}"
          MAJOR_TAG=$(echo "${{ github.ref_name }}" | sed 's/^v//')
          MINOR_TAG=`echo $MAJOR_TAG | cut -d '.' -f 1,2`
          PRE_IMAGE="${IMAGE_NAME}:dms-pre-${MAJOR_TAG}"
          RELEASE_MAJOR="${IMAGE_NAME}:${MAJOR_TAG}"
          RELEASE_MINOR="${IMAGE_NAME}:${MINOR_TAG}"

          echo "PRE_IMAGE=$PRE_IMAGE" >> $GITHUB_OUTPUT
          echo "RELEASE_MAJOR=$RELEASE_MAJOR" >> $GITHUB_OUTPUT
          echo "RELEASE_MINOR=$RELEASE_MINOR" >> $GITHUB_OUTPUT

      - name: Pull DMS Prerelease Image
        run: docker pull "${{ steps.prepare-tags.outputs.PRE_IMAGE }}"

      - name: Tag DMS image
        run: |
          docker tag "${{ steps.prepare-tags.outputs.PRE_IMAGE }}" "${{ steps.prepare-tags.outputs.RELEASE_MAJOR }}"
          docker tag "${{ steps.prepare-tags.outputs.PRE_IMAGE }}" "${{ steps.prepare-tags.outputs.RELEASE_MINOR }}"

      - name: Login to Docker hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Push DMS Image
        run: |
          docker push "${{ steps.prepare-tags.outputs.RELEASE_MAJOR }}"
          docker push "${{ steps.prepare-tags.outputs.RELEASE_MINOR }}"

  tag-cs-image:
    name: Release Tag Configuration Image
    runs-on: ubuntu-latest
    steps:
      - name: Prepare Release Tags
        id: prepare-tags
        run: |
          IMAGE_NAME="edfialliance/dms-configuration-service"
          MAJOR_TAG="${{ github.ref_name }}"
          MINOR_TAG=`echo $MAJOR_TAG | cut -d '.' -f 1,2`
          PRE_IMAGE="${IMAGE_NAME}:cs-pre-${MAJOR_TAG}"
          RELEASE_MAJOR="${IMAGE_NAME}:${MAJOR_TAG}"
          RELEASE_MINOR="${IMAGE_NAME}:${MINOR_TAG}"

          echo "PRE_IMAGE=$PRE_IMAGE" >> $GITHUB_OUTPUT
          echo "RELEASE_MAJOR=$RELEASE_MAJOR" >> $GITHUB_OUTPUT
          echo "RELEASE_MINOR=$RELEASE_MINOR" >> $GITHUB_OUTPUT

      - name: Pull Configuration Prerelease Image
        run: docker pull "${{ steps.prepare-tags.outputs.PRE_IMAGE }}"

      - name: Tag Configuration image
        run: |
          docker tag "${{ steps.prepare-tags.outputs.PRE_IMAGE }}" "${{ steps.prepare-tags.outputs.RELEASE_MAJOR }}"
          docker tag "${{ steps.prepare-tags.outputs.PRE_IMAGE }}" "${{ steps.prepare-tags.outputs.RELEASE_MINOR }}"

      - name: Login to Docker hub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Push Configuration Image
        run: |
          docker push "${{ steps.prepare-tags.outputs.RELEASE_MAJOR }}"
          docker push "${{ steps.prepare-tags.outputs.RELEASE_MINOR }}"
